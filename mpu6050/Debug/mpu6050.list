
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005cd8  08005cd8  00015cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08005da0  08005da0  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da0  08005da0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005da8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000110  08005eb4  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08005eb4  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff57  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002368  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  000323f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00033340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190e2  00000000  00000000  000341a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d31f  00000000  00000000  0004d28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dbf0  00000000  00000000  0005a5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d4  00000000  00000000  000e8214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000110 	.word	0x20000110
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cc0 	.word	0x08005cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000114 	.word	0x20000114
 800014c:	08005cc0 	.word	0x08005cc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <MX_GPIO_Init+0x58>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fa6:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <MX_I2C1_Init+0x54>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x58>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_I2C1_Init+0x50>)
 8000fde:	f001 fa33 	bl	8002448 <HAL_I2C_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe8:	f000 f931 	bl	800124e <Error_Handler>
  }

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000013c 	.word	0x2000013c
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	00061a80 	.word	0x00061a80

08000ffc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_I2C_MspInit+0x90>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d132      	bne.n	8001082 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_I2C_MspInit+0x94>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_I2C_MspInit+0x94>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_I2C_MspInit+0x94>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001034:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103a:	2312      	movs	r3, #18
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4812      	ldr	r0, [pc, #72]	; (8001094 <HAL_I2C_MspInit+0x98>)
 800104a:	f001 f8a3 	bl	8002194 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_I2C_MspInit+0x9c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_I2C_MspInit+0x9c>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_I2C_MspInit+0x94>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_I2C_MspInit+0x94>)
 8001070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_I2C_MspInit+0x94>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40005400 	.word	0x40005400
 8001090:	40021000 	.word	0x40021000
 8001094:	40010c00 	.word	0x40010c00
 8001098:	40010000 	.word	0x40010000

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fe57 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f88d 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f7ff ff4b 	bl	8000f44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ae:	f7ff ff77 	bl	8000fa0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010b2:	f000 fdab 	bl	8001c0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010b6:	f000 fd11 	bl	8001adc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
//  char a[10]= "\n";
//  HAL_UART_Transmit(&huart1, &str_title, strlen(str_title)-2, 500);
//  HAL_UART_Transmit(&huart1, &a, strlen(a), 500);
  while (MPU6050_Init(&hi2c1) == 1);
 80010ba:	bf00      	nop
 80010bc:	4837      	ldr	r0, [pc, #220]	; (800119c <main+0x100>)
 80010be:	f000 f8ca 	bl	8001256 <MPU6050_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d0f9      	beq.n	80010bc <main+0x20>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick()-time_current >= time_example)
 80010c8:	f000 fe9c 	bl	8001e04 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <main+0x104>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad2      	subs	r2, r2, r3
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <main+0x108>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3f5      	bcc.n	80010c8 <main+0x2c>
	  {
		  time_current = HAL_GetTick();
 80010dc:	f000 fe92 	bl	8001e04 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <main+0x104>)
 80010e4:	601a      	str	r2, [r3, #0]
		  MPU6050_Read_All(&hi2c1,&MPU6050);
 80010e6:	4930      	ldr	r1, [pc, #192]	; (80011a8 <main+0x10c>)
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <main+0x100>)
 80010ea:	f000 f90d 	bl	8001308 <MPU6050_Read_All>
		  int datax = MPU6050.KalmanAngleX*1000.0;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <main+0x10c>)
 80010f0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <main+0x110>)
 80010fa:	f7ff f9ed 	bl	80004d8 <__aeabi_dmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	4618      	mov	r0, r3
 8001104:	4621      	mov	r1, r4
 8001106:	f7ff fc97 	bl	8000a38 <__aeabi_d2iz>
 800110a:	4603      	mov	r3, r0
 800110c:	60fb      	str	r3, [r7, #12]
		  int datay = MPU6050.KalmanAngleY*1000.0;
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <main+0x10c>)
 8001110:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <main+0x110>)
 800111a:	f7ff f9dd 	bl	80004d8 <__aeabi_dmul>
 800111e:	4603      	mov	r3, r0
 8001120:	460c      	mov	r4, r1
 8001122:	4618      	mov	r0, r3
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff fc87 	bl	8000a38 <__aeabi_d2iz>
 800112a:	4603      	mov	r3, r0
 800112c:	60bb      	str	r3, [r7, #8]
		  int dataz = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]

		  sprintf(data,FRAME,SIGN(datax),ABS(datax),SIGN(datay),ABS(datay),SIGN(dataz),ABS(dataz));
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db01      	blt.n	800113c <main+0xa0>
 8001138:	4c1d      	ldr	r4, [pc, #116]	; (80011b0 <main+0x114>)
 800113a:	e000      	b.n	800113e <main+0xa2>
 800113c:	4c1d      	ldr	r4, [pc, #116]	; (80011b4 <main+0x118>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 8001144:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db01      	blt.n	8001152 <main+0xb6>
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <main+0x114>)
 8001150:	e000      	b.n	8001154 <main+0xb8>
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <main+0x118>)
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	2a00      	cmp	r2, #0
 8001158:	bfb8      	it	lt
 800115a:	4252      	neglt	r2, r2
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	2900      	cmp	r1, #0
 8001160:	db01      	blt.n	8001166 <main+0xca>
 8001162:	4913      	ldr	r1, [pc, #76]	; (80011b0 <main+0x114>)
 8001164:	e000      	b.n	8001168 <main+0xcc>
 8001166:	4913      	ldr	r1, [pc, #76]	; (80011b4 <main+0x118>)
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	2800      	cmp	r0, #0
 800116c:	bfb8      	it	lt
 800116e:	4240      	neglt	r0, r0
 8001170:	9003      	str	r0, [sp, #12]
 8001172:	9102      	str	r1, [sp, #8]
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	462b      	mov	r3, r5
 800117a:	4622      	mov	r2, r4
 800117c:	490e      	ldr	r1, [pc, #56]	; (80011b8 <main+0x11c>)
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0x120>)
 8001180:	f003 fe1c 	bl	8004dbc <siprintf>

		  HAL_UART_Transmit(&huart1,(uint8_t*)data, strlen(data), 5);
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <main+0x120>)
 8001186:	f7fe ffe3 	bl	8000150 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	2305      	movs	r3, #5
 8001190:	490a      	ldr	r1, [pc, #40]	; (80011bc <main+0x120>)
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <main+0x124>)
 8001194:	f003 f953 	bl	800443e <HAL_UART_Transmit>
	  if (HAL_GetTick()-time_current >= time_example)
 8001198:	e796      	b.n	80010c8 <main+0x2c>
 800119a:	bf00      	nop
 800119c:	2000013c 	.word	0x2000013c
 80011a0:	2000012c 	.word	0x2000012c
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000190 	.word	0x20000190
 80011ac:	408f4000 	.word	0x408f4000
 80011b0:	08005cd8 	.word	0x08005cd8
 80011b4:	08005cdc 	.word	0x08005cdc
 80011b8:	08005ce0 	.word	0x08005ce0
 80011bc:	200001e8 	.word	0x200001e8
 80011c0:	20000298 	.word	0x20000298

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b090      	sub	sp, #64	; 0x40
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	2228      	movs	r2, #40	; 0x28
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fdea 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001202:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001206:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f909 	bl	8003424 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001218:	f000 f819 	bl	800124e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fb74 	bl	8003924 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001242:	f000 f804 	bl	800124e <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3740      	adds	r7, #64	; 0x40
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001252:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x6>

08001256 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b088      	sub	sp, #32
 800125a:	af04      	add	r7, sp, #16
 800125c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800125e:	2364      	movs	r3, #100	; 0x64
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2301      	movs	r3, #1
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	f107 030f 	add.w	r3, r7, #15
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	2275      	movs	r2, #117	; 0x75
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 fb1a 	bl	80028ac <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b68      	cmp	r3, #104	; 0x68
 800127c:	d13d      	bne.n	80012fa <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001282:	2364      	movs	r3, #100	; 0x64
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 030e 	add.w	r3, r7, #14
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	226b      	movs	r2, #107	; 0x6b
 8001294:	21d0      	movs	r1, #208	; 0xd0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f001 fa0e 	bl	80026b8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800129c:	2307      	movs	r3, #7
 800129e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 030e 	add.w	r3, r7, #14
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	2219      	movs	r2, #25
 80012b2:	21d0      	movs	r1, #208	; 0xd0
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f001 f9ff 	bl	80026b8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	2301      	movs	r3, #1
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	f107 030e 	add.w	r3, r7, #14
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	221c      	movs	r2, #28
 80012d0:	21d0      	movs	r1, #208	; 0xd0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f001 f9f0 	bl	80026b8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80012d8:	2300      	movs	r3, #0
 80012da:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	f107 030e 	add.w	r3, r7, #14
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	221b      	movs	r2, #27
 80012ee:	21d0      	movs	r1, #208	; 0xd0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f001 f9e1 	bl	80026b8 <HAL_I2C_Mem_Write>
        return 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <MPU6050_Init+0xa6>
    }
    return 1;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0000      	movs	r0, r0
	...

08001308 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800130c:	b094      	sub	sp, #80	; 0x50
 800130e:	af04      	add	r7, sp, #16
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	230e      	movs	r3, #14
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	223b      	movs	r2, #59	; 0x3b
 8001326:	21d0      	movs	r1, #208	; 0xd0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f001 fabf 	bl	80028ac <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800132e:	7a3b      	ldrb	r3, [r7, #8]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	7a7b      	ldrb	r3, [r7, #9]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21a      	sxth	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21a      	sxth	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	b21b      	sxth	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001372:	7c3b      	ldrb	r3, [r7, #16]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	7c7b      	ldrb	r3, [r7, #17]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21a      	sxth	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001384:	7cbb      	ldrb	r3, [r7, #18]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	7cfb      	ldrb	r3, [r7, #19]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b21a      	sxth	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001396:	7d3b      	ldrb	r3, [r7, #20]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7d7b      	ldrb	r3, [r7, #21]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f828 	bl	8000404 <__aeabi_i2d>
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4bb7      	ldr	r3, [pc, #732]	; (8001698 <MPU6050_Read_All+0x390>)
 80013ba:	f7ff f9b7 	bl	800072c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f818 	bl	8000404 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4baf      	ldr	r3, [pc, #700]	; (8001698 <MPU6050_Read_All+0x390>)
 80013da:	f7ff f9a7 	bl	800072c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f808 	bl	8000404 <__aeabi_i2d>
 80013f4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001680 <MPU6050_Read_All+0x378>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f997 	bl	800072c <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001408:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fbf5 	bl	8000bfc <__aeabi_i2f>
 8001412:	4603      	mov	r3, r0
 8001414:	49a1      	ldr	r1, [pc, #644]	; (800169c <MPU6050_Read_All+0x394>)
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fcf8 	bl	8000e0c <__aeabi_fdiv>
 800141c:	4603      	mov	r3, r0
 800141e:	49a0      	ldr	r1, [pc, #640]	; (80016a0 <MPU6050_Read_All+0x398>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fb37 	bl	8000a94 <__addsf3>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ffe5 	bl	8000404 <__aeabi_i2d>
 800143a:	a393      	add	r3, pc, #588	; (adr r3, 8001688 <MPU6050_Read_All+0x380>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	f7ff f974 	bl	800072c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe ffd5 	bl	8000404 <__aeabi_i2d>
 800145a:	a38b      	add	r3, pc, #556	; (adr r3, 8001688 <MPU6050_Read_All+0x380>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f964 	bl	800072c <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffc5 	bl	8000404 <__aeabi_i2d>
 800147a:	a383      	add	r3, pc, #524	; (adr r3, 8001688 <MPU6050_Read_All+0x380>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f954 	bl	800072c <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800148e:	f000 fcb9 	bl	8001e04 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	4b83      	ldr	r3, [pc, #524]	; (80016a4 <MPU6050_Read_All+0x39c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ffa2 	bl	80003e4 <__aeabi_ui2d>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <MPU6050_Read_All+0x3a0>)
 80014a6:	f7ff f941 	bl	800072c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80014b2:	f000 fca7 	bl	8001e04 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <MPU6050_Read_All+0x39c>)
 80014ba:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	461a      	mov	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ca:	fb03 f202 	mul.w	r2, r3, r2
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014d4:	4619      	mov	r1, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014dc:	fb03 f301 	mul.w	r3, r3, r1
 80014e0:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff8e 	bl	8000404 <__aeabi_i2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f004 fa06 	bl	8005900 <sqrt>
 80014f4:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001504:	f7ff fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d119      	bne.n	8001542 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff75 	bl	8000404 <__aeabi_i2d>
 800151a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800151e:	f7ff f905 	bl	800072c <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f004 f859 	bl	80055e0 <atan>
 800152e:	a358      	add	r3, pc, #352	; (adr r3, 8001690 <MPU6050_Read_All+0x388>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7fe ffd0 	bl	80004d8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001540:	e005      	b.n	800154e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	425b      	negs	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff54 	bl	8000404 <__aeabi_i2d>
 800155c:	4682      	mov	sl, r0
 800155e:	468b      	mov	fp, r1
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff4c 	bl	8000404 <__aeabi_i2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4650      	mov	r0, sl
 8001572:	4659      	mov	r1, fp
 8001574:	f004 f9c2 	bl	80058fc <atan2>
 8001578:	a345      	add	r3, pc, #276	; (adr r3, 8001690 <MPU6050_Read_All+0x388>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7fe ffab 	bl	80004d8 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <MPU6050_Read_All+0x3a4>)
 8001590:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001594:	f7ff fa12 	bl	80009bc <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <MPU6050_Read_All+0x2ac>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <MPU6050_Read_All+0x3a8>)
 80015aa:	f7ff fa25 	bl	80009f8 <__aeabi_dcmpgt>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d114      	bne.n	80015de <MPU6050_Read_All+0x2d6>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <MPU6050_Read_All+0x3a8>)
 80015ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015be:	f7ff fa1b 	bl	80009f8 <__aeabi_dcmpgt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d015      	beq.n	80015f4 <MPU6050_Read_All+0x2ec>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <MPU6050_Read_All+0x3a4>)
 80015d4:	f7ff f9f2 	bl	80009bc <__aeabi_dcmplt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <MPU6050_Read_All+0x2ec>
    {
        KalmanY.angle = pitch;
 80015de:	4935      	ldr	r1, [pc, #212]	; (80016b4 <MPU6050_Read_All+0x3ac>)
 80015e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80015f2:	e012      	b.n	800161a <MPU6050_Read_All+0x312>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001602:	e9cd 2300 	strd	r2, r3, [sp]
 8001606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800160a:	482a      	ldr	r0, [pc, #168]	; (80016b4 <MPU6050_Read_All+0x3ac>)
 800160c:	f000 f856 	bl	80016bc <Kalman_getAngle>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001620:	4690      	mov	r8, r2
 8001622:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MPU6050_Read_All+0x3a8>)
 800162c:	4640      	mov	r0, r8
 800162e:	4649      	mov	r1, r9
 8001630:	f7ff f9e2 	bl	80009f8 <__aeabi_dcmpgt>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001640:	4614      	mov	r4, r2
 8001642:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001652:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001656:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800165a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800165e:	e9cd 3400 	strd	r3, r4, [sp]
 8001662:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001666:	4814      	ldr	r0, [pc, #80]	; (80016b8 <MPU6050_Read_All+0x3b0>)
 8001668:	f000 f828 	bl	80016bc <Kalman_getAngle>
 800166c:	4603      	mov	r3, r0
 800166e:	460c      	mov	r4, r1
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
}
 8001676:	bf00      	nop
 8001678:	3740      	adds	r7, #64	; 0x40
 800167a:	46bd      	mov	sp, r7
 800167c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001680:	00000000 	.word	0x00000000
 8001684:	40cc2900 	.word	0x40cc2900
 8001688:	00000000 	.word	0x00000000
 800168c:	40606000 	.word	0x40606000
 8001690:	1a63c1f8 	.word	0x1a63c1f8
 8001694:	404ca5dc 	.word	0x404ca5dc
 8001698:	40d00000 	.word	0x40d00000
 800169c:	43aa0000 	.word	0x43aa0000
 80016a0:	42121eb8 	.word	0x42121eb8
 80016a4:	2000024c 	.word	0x2000024c
 80016a8:	408f4000 	.word	0x408f4000
 80016ac:	c0568000 	.word	0xc0568000
 80016b0:	40568000 	.word	0x40568000
 80016b4:	20000050 	.word	0x20000050
 80016b8:	20000008 	.word	0x20000008

080016bc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80016bc:	b5b0      	push	{r4, r5, r7, lr}
 80016be:	b092      	sub	sp, #72	; 0x48
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f103 0420 	add.w	r4, r3, #32
 80016ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80016da:	f7fe fd45 	bl	8000168 <__aeabi_dsub>
 80016de:	4603      	mov	r3, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016f4:	f7fe fef0 	bl	80004d8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fd34 	bl	800016c <__adddf3>
 8001704:	4603      	mov	r3, r0
 8001706:	460c      	mov	r4, r1
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800171a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800171e:	f7fe fedb 	bl	80004d8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001730:	f7fe fd1a 	bl	8000168 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001742:	f7fe fd11 	bl	8000168 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fd0a 	bl	800016c <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001764:	f7fe feb8 	bl	80004d8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f7fe fcfc 	bl	800016c <__adddf3>
 8001774:	4603      	mov	r3, r0
 8001776:	460c      	mov	r4, r1
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800178a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800178e:	f7fe fea3 	bl	80004d8 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7fe fce5 	bl	8000168 <__aeabi_dsub>
 800179e:	4603      	mov	r3, r0
 80017a0:	460c      	mov	r4, r1
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80017b4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017b8:	f7fe fe8e 	bl	80004d8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fcd0 	bl	8000168 <__aeabi_dsub>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017e2:	f7fe fe79 	bl	80004d8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4620      	mov	r0, r4
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7fe fcbd 	bl	800016c <__adddf3>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f103 0410 	add.w	r4, r3, #16
 8001808:	e9d4 3400 	ldrd	r3, r4, [r4]
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	f7fe fcac 	bl	800016c <__adddf3>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001822:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001826:	f7fe ff81 	bl	800072c <__aeabi_ddiv>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800183c:	f7fe ff76 	bl	800072c <__aeabi_ddiv>
 8001840:	4603      	mov	r3, r0
 8001842:	460c      	mov	r4, r1
 8001844:	e9c7 3406 	strd	r3, r4, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f103 0418 	add.w	r4, r3, #24
 800184e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001852:	461a      	mov	r2, r3
 8001854:	4623      	mov	r3, r4
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	f7fe fc85 	bl	8000168 <__aeabi_dsub>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800186c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001870:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001874:	f7fe fe30 	bl	80004d8 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fc74 	bl	800016c <__adddf3>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001894:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001898:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800189c:	f7fe fe1c 	bl	80004d8 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fc60 	bl	800016c <__adddf3>
 80018ac:	4603      	mov	r3, r0
 80018ae:	460c      	mov	r4, r1
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80018bc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018c0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80018ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018ce:	e9c7 3408 	strd	r3, r4, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80018d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018e0:	f7fe fdfa 	bl	80004d8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4620      	mov	r0, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	f7fe fc3c 	bl	8000168 <__aeabi_dsub>
 80018f0:	4603      	mov	r3, r0
 80018f2:	460c      	mov	r4, r1
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001900:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001908:	f7fe fde6 	bl	80004d8 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fc28 	bl	8000168 <__aeabi_dsub>
 8001918:	4603      	mov	r3, r0
 800191a:	460c      	mov	r4, r1
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800192c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001930:	f7fe fdd2 	bl	80004d8 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fc14 	bl	8000168 <__aeabi_dsub>
 8001940:	4603      	mov	r3, r0
 8001942:	460c      	mov	r4, r1
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001950:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001954:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001958:	f7fe fdbe 	bl	80004d8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4620      	mov	r0, r4
 8001962:	4629      	mov	r1, r5
 8001964:	f7fe fc00 	bl	8000168 <__aeabi_dsub>
 8001968:	4603      	mov	r3, r0
 800196a:	460c      	mov	r4, r1
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f103 0418 	add.w	r4, r3, #24
 8001978:	e9d4 3400 	ldrd	r3, r4, [r4]
};
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	3748      	adds	r7, #72	; 0x48
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_MspInit+0x5c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_MspInit+0x5c>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_MspInit+0x5c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x5c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_MspInit+0x60>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_MspInit+0x60>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a32:	f000 f9d5 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM2_IRQHandler+0x10>)
 8001a42:	f002 f95a 	bl	8003cfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000250 	.word	0x20000250

08001a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <USART1_IRQHandler+0x10>)
 8001a56:	f002 fd85 	bl	8004564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000298 	.word	0x20000298

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f003 f960 	bl	8004d58 <__errno>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20005000 	.word	0x20005000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000130 	.word	0x20000130
 8001acc:	200002e8 	.word	0x200002e8

08001ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b02:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001b06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b10:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b22:	4817      	ldr	r0, [pc, #92]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b24:	f002 f89a 	bl	8003c5c <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b2e:	f7ff fb8e 	bl	800124e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b36:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b4c:	f002 f9dd 	bl	8003f0a <HAL_TIM_ConfigClockSource>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b56:	f7ff fb7a 	bl	800124e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b68:	f002 fbac 	bl	80042c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b72:	f7ff fb6c 	bl	800124e <Error_Handler>
  }

}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000250 	.word	0x20000250

08001b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba2:	d12b      	bne.n	8001bfc <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_TIM_Base_MspInit+0x80>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_TIM_Base_MspInit+0x80>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	61d3      	str	r3, [r2, #28]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_TIM_Base_MspInit+0x80>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_TIM_Base_MspInit+0x80>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_TIM_Base_MspInit+0x80>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_TIM_Base_MspInit+0x80>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <HAL_TIM_Base_MspInit+0x84>)
 8001be8:	f000 fad4 	bl	8002194 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2102      	movs	r1, #2
 8001bf0:	201c      	movs	r0, #28
 8001bf2:	f000 f9e8 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf6:	201c      	movs	r0, #28
 8001bf8:	f000 fa01 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010800 	.word	0x40010800

08001c0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <MX_USART1_UART_Init+0x50>)
 8001c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c18:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_USART1_UART_Init+0x4c>)
 8001c44:	f002 fbae 	bl	80043a4 <HAL_UART_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4e:	f7ff fafe 	bl	800124e <Error_Handler>
  }

}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000298 	.word	0x20000298
 8001c5c:	40013800 	.word	0x40013800

08001c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d139      	bne.n	8001cf4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480f      	ldr	r0, [pc, #60]	; (8001d04 <HAL_UART_MspInit+0xa4>)
 8001cc6:	f000 fa65 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <HAL_UART_MspInit+0xa4>)
 8001ce0:	f000 fa58 	bl	8002194 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	2025      	movs	r0, #37	; 0x25
 8001cea:	f000 f96c 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cee:	2025      	movs	r0, #37	; 0x25
 8001cf0:	f000 f985 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010800 	.word	0x40010800

08001d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	; (8001d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d2e:	f7ff fecf 	bl	8001ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f003 f817 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d36:	f7ff f9b1 	bl	800109c <main>
  bx lr
 8001d3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001d44:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 8001d48:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001d4c:	200002e4 	.word	0x200002e4

08001d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_2_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_Init+0x28>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_Init+0x28>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f923 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fe0a 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f93b 	bl	800201a <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f903 	bl	8001fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000098 	.word	0x20000098
 8001dd8:	200000a0 	.word	0x200000a0
 8001ddc:	2000009c 	.word	0x2000009c

08001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x1c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x20>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <HAL_IncTick+0x20>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	200000a0 	.word	0x200000a0
 8001e00:	200002dc 	.word	0x200002dc

08001e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <HAL_GetTick+0x10>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	200002dc 	.word	0x200002dc

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	60d3      	str	r3, [r2, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4906      	ldr	r1, [pc, #24]	; (8001eb0 <__NVIC_EnableIRQ+0x34>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f7ff ff90 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff2d 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd8:	f7ff ff42 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff ff90 	bl	8001f08 <NVIC_EncodePriority>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5f 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff35 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ffa2 	bl	8001f6c <SysTick_Config>
 8002028:	4603      	mov	r3, r0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002044:	2b02      	cmp	r3, #2
 8002046:	d008      	beq.n	800205a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2204      	movs	r2, #4
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e020      	b.n	800209c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 020e 	bic.w	r2, r2, #14
 8002068:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d005      	beq.n	80020ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2204      	movs	r2, #4
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e051      	b.n	800216e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 020e 	bic.w	r2, r2, #14
 80020d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a22      	ldr	r2, [pc, #136]	; (8002178 <HAL_DMA_Abort_IT+0xd0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d029      	beq.n	8002148 <HAL_DMA_Abort_IT+0xa0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_DMA_Abort_IT+0xd4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d022      	beq.n	8002144 <HAL_DMA_Abort_IT+0x9c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_DMA_Abort_IT+0xd8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d01a      	beq.n	800213e <HAL_DMA_Abort_IT+0x96>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_DMA_Abort_IT+0xdc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d012      	beq.n	8002138 <HAL_DMA_Abort_IT+0x90>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <HAL_DMA_Abort_IT+0xe0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00a      	beq.n	8002132 <HAL_DMA_Abort_IT+0x8a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_DMA_Abort_IT+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d102      	bne.n	800212c <HAL_DMA_Abort_IT+0x84>
 8002126:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800212a:	e00e      	b.n	800214a <HAL_DMA_Abort_IT+0xa2>
 800212c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002130:	e00b      	b.n	800214a <HAL_DMA_Abort_IT+0xa2>
 8002132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002136:	e008      	b.n	800214a <HAL_DMA_Abort_IT+0xa2>
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	e005      	b.n	800214a <HAL_DMA_Abort_IT+0xa2>
 800213e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002142:	e002      	b.n	800214a <HAL_DMA_Abort_IT+0xa2>
 8002144:	2310      	movs	r3, #16
 8002146:	e000      	b.n	800214a <HAL_DMA_Abort_IT+0xa2>
 8002148:	2301      	movs	r3, #1
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_DMA_Abort_IT+0xe8>)
 800214c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
    } 
  }
  return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40020008 	.word	0x40020008
 800217c:	4002001c 	.word	0x4002001c
 8002180:	40020030 	.word	0x40020030
 8002184:	40020044 	.word	0x40020044
 8002188:	40020058 	.word	0x40020058
 800218c:	4002006c 	.word	0x4002006c
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a6:	e127      	b.n	80023f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a8:	2201      	movs	r2, #1
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8116 	bne.w	80023f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b12      	cmp	r3, #18
 80021cc:	d034      	beq.n	8002238 <HAL_GPIO_Init+0xa4>
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d80d      	bhi.n	80021ee <HAL_GPIO_Init+0x5a>
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x9a>
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d804      	bhi.n	80021e4 <HAL_GPIO_Init+0x50>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d031      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d01c      	beq.n	800221c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021e2:	e048      	b.n	8002276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d043      	beq.n	8002270 <HAL_GPIO_Init+0xdc>
 80021e8:	2b11      	cmp	r3, #17
 80021ea:	d01b      	beq.n	8002224 <HAL_GPIO_Init+0x90>
          break;
 80021ec:	e043      	b.n	8002276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80021ee:	4a89      	ldr	r2, [pc, #548]	; (8002414 <HAL_GPIO_Init+0x280>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d026      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 80021f4:	4a87      	ldr	r2, [pc, #540]	; (8002414 <HAL_GPIO_Init+0x280>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d806      	bhi.n	8002208 <HAL_GPIO_Init+0x74>
 80021fa:	4a87      	ldr	r2, [pc, #540]	; (8002418 <HAL_GPIO_Init+0x284>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d020      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 8002200:	4a86      	ldr	r2, [pc, #536]	; (800241c <HAL_GPIO_Init+0x288>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01d      	beq.n	8002242 <HAL_GPIO_Init+0xae>
          break;
 8002206:	e036      	b.n	8002276 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002208:	4a85      	ldr	r2, [pc, #532]	; (8002420 <HAL_GPIO_Init+0x28c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 800220e:	4a85      	ldr	r2, [pc, #532]	; (8002424 <HAL_GPIO_Init+0x290>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d016      	beq.n	8002242 <HAL_GPIO_Init+0xae>
 8002214:	4a84      	ldr	r2, [pc, #528]	; (8002428 <HAL_GPIO_Init+0x294>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0xae>
          break;
 800221a:	e02c      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e028      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	3304      	adds	r3, #4
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e023      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	3308      	adds	r3, #8
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e01e      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	330c      	adds	r3, #12
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e019      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224a:	2304      	movs	r3, #4
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e012      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	611a      	str	r2, [r3, #16]
          break;
 8002262:	e008      	b.n	8002276 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	615a      	str	r2, [r3, #20]
          break;
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2bff      	cmp	r3, #255	; 0xff
 800227a:	d801      	bhi.n	8002280 <HAL_GPIO_Init+0xec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	e001      	b.n	8002284 <HAL_GPIO_Init+0xf0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2bff      	cmp	r3, #255	; 0xff
 800228a:	d802      	bhi.n	8002292 <HAL_GPIO_Init+0xfe>
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x104>
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3b08      	subs	r3, #8
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	210f      	movs	r1, #15
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	6a39      	ldr	r1, [r7, #32]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	431a      	orrs	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8096 	beq.w	80023f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c6:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_GPIO_Init+0x298>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_GPIO_Init+0x298>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_GPIO_Init+0x298>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022de:	4a54      	ldr	r2, [pc, #336]	; (8002430 <HAL_GPIO_Init+0x29c>)
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x2a0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x19e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x2a4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x19a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a49      	ldr	r2, [pc, #292]	; (800243c <HAL_GPIO_Init+0x2a8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x196>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a48      	ldr	r2, [pc, #288]	; (8002440 <HAL_GPIO_Init+0x2ac>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x192>
 8002322:	2303      	movs	r3, #3
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 8002326:	2304      	movs	r3, #4
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x1a0>
 8002332:	2300      	movs	r3, #0
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002344:	493a      	ldr	r1, [pc, #232]	; (8002430 <HAL_GPIO_Init+0x29c>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	4938      	ldr	r1, [pc, #224]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	43db      	mvns	r3, r3
 8002374:	4933      	ldr	r1, [pc, #204]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002376:	4013      	ands	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	492e      	ldr	r1, [pc, #184]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	43db      	mvns	r3, r3
 800239c:	4929      	ldr	r1, [pc, #164]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 800239e:	4013      	ands	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	4924      	ldr	r1, [pc, #144]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	491f      	ldr	r1, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	491a      	ldr	r1, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	4915      	ldr	r1, [pc, #84]	; (8002444 <HAL_GPIO_Init+0x2b0>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	3301      	adds	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	f47f aed0 	bne.w	80021a8 <HAL_GPIO_Init+0x14>
  }
}
 8002408:	bf00      	nop
 800240a:	372c      	adds	r7, #44	; 0x2c
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	10210000 	.word	0x10210000
 8002418:	10110000 	.word	0x10110000
 800241c:	10120000 	.word	0x10120000
 8002420:	10310000 	.word	0x10310000
 8002424:	10320000 	.word	0x10320000
 8002428:	10220000 	.word	0x10220000
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40011000 	.word	0x40011000
 8002440:	40011400 	.word	0x40011400
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e11f      	b.n	800269a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fdc4 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024ac:	f001 fb90 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 80024b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a7b      	ldr	r2, [pc, #492]	; (80026a4 <HAL_I2C_Init+0x25c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d807      	bhi.n	80024cc <HAL_I2C_Init+0x84>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_I2C_Init+0x260>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	bf94      	ite	ls
 80024c4:	2301      	movls	r3, #1
 80024c6:	2300      	movhi	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e006      	b.n	80024da <HAL_I2C_Init+0x92>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a77      	ldr	r2, [pc, #476]	; (80026ac <HAL_I2C_Init+0x264>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0db      	b.n	800269a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_I2C_Init+0x268>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9b      	lsrs	r3, r3, #18
 80024ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a64      	ldr	r2, [pc, #400]	; (80026a4 <HAL_I2C_Init+0x25c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d802      	bhi.n	800251c <HAL_I2C_Init+0xd4>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3301      	adds	r3, #1
 800251a:	e009      	b.n	8002530 <HAL_I2C_Init+0xe8>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_I2C_Init+0x26c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	3301      	adds	r3, #1
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	430b      	orrs	r3, r1
 8002536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4956      	ldr	r1, [pc, #344]	; (80026a4 <HAL_I2C_Init+0x25c>)
 800254c:	428b      	cmp	r3, r1
 800254e:	d80d      	bhi.n	800256c <HAL_I2C_Init+0x124>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e59      	subs	r1, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fbb1 f3f3 	udiv	r3, r1, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	bf38      	it	cc
 8002568:	2304      	movcc	r3, #4
 800256a:	e04f      	b.n	800260c <HAL_I2C_Init+0x1c4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_I2C_Init+0x150>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e012      	b.n	80025be <HAL_I2C_Init+0x176>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x17e>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_I2C_Init+0x1c4>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10e      	bne.n	80025ec <HAL_I2C_Init+0x1a4>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e58      	subs	r0, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	e00f      	b.n	800260c <HAL_I2C_Init+0x1c4>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	6809      	ldr	r1, [r1, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800263a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6911      	ldr	r1, [r2, #16]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	000186a0 	.word	0x000186a0
 80026a8:	001e847f 	.word	0x001e847f
 80026ac:	003d08ff 	.word	0x003d08ff
 80026b0:	431bde83 	.word	0x431bde83
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	4608      	mov	r0, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	817b      	strh	r3, [r7, #10]
 80026ca:	460b      	mov	r3, r1
 80026cc:	813b      	strh	r3, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d2:	f7ff fb97 	bl	8001e04 <HAL_GetTick>
 80026d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	f040 80d9 	bne.w	8002898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2319      	movs	r3, #25
 80026ec:	2201      	movs	r2, #1
 80026ee:	496d      	ldr	r1, [pc, #436]	; (80028a4 <HAL_I2C_Mem_Write+0x1ec>)
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fcbb 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
 80026fe:	e0cc      	b.n	800289a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_I2C_Mem_Write+0x56>
 800270a:	2302      	movs	r3, #2
 800270c:	e0c5      	b.n	800289a <HAL_I2C_Mem_Write+0x1e2>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d007      	beq.n	8002734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2221      	movs	r2, #33	; 0x21
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002776:	88f8      	ldrh	r0, [r7, #6]
 8002778:	893a      	ldrh	r2, [r7, #8]
 800277a:	8979      	ldrh	r1, [r7, #10]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4603      	mov	r3, r0
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 faf2 	bl	8002d70 <I2C_RequestMemoryWrite>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d052      	beq.n	8002838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e081      	b.n	800289a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fd3c 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00d      	beq.n	80027c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d107      	bne.n	80027be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06b      	b.n	800289a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	781a      	ldrb	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d11b      	bne.n	8002838 <HAL_I2C_Mem_Write+0x180>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	d017      	beq.n	8002838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1aa      	bne.n	8002796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fd28 	bl	800329a <I2C_WaitOnBTFFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b04      	cmp	r3, #4
 8002856:	d107      	bne.n	8002868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e016      	b.n	800289a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	00100002 	.word	0x00100002
 80028a8:	ffff0000 	.word	0xffff0000

080028ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	4608      	mov	r0, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	817b      	strh	r3, [r7, #10]
 80028be:	460b      	mov	r3, r1
 80028c0:	813b      	strh	r3, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ca:	f7ff fa9b 	bl	8001e04 <HAL_GetTick>
 80028ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b20      	cmp	r3, #32
 80028da:	f040 823d 	bne.w	8002d58 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2319      	movs	r3, #25
 80028e4:	2201      	movs	r2, #1
 80028e6:	4981      	ldr	r1, [pc, #516]	; (8002aec <HAL_I2C_Mem_Read+0x240>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fbbf 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	e230      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Mem_Read+0x5a>
 8002902:	2302      	movs	r3, #2
 8002904:	e229      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d007      	beq.n	800292c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2222      	movs	r2, #34	; 0x22
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a61      	ldr	r2, [pc, #388]	; (8002af0 <HAL_I2C_Mem_Read+0x244>)
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800296e:	88f8      	ldrh	r0, [r7, #6]
 8002970:	893a      	ldrh	r2, [r7, #8]
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4603      	mov	r3, r0
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fa8c 	bl	8002e9c <I2C_RequestMemoryRead>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1e5      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e1b9      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d11d      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029fe:	b662      	cpsie	i
 8002a00:	e197      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d11d      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a1a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a42:	b662      	cpsie	i
 8002a44:	e175      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e161      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 811a 	bhi.w	8002cac <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc49 	bl	800331c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e162      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac6:	e134      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d150      	bne.n	8002b72 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_I2C_Mem_Read+0x248>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fac6 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e137      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b3c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b70:	e0df      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	2200      	movs	r2, #0
 8002b7a:	497a      	ldr	r1, [pc, #488]	; (8002d64 <HAL_I2C_Mem_Read+0x4b8>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fa75 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0e6      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b9c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_I2C_Mem_Read+0x4bc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	4a65      	ldr	r2, [pc, #404]	; (8002d6c <HAL_I2C_Mem_Read+0x4c0>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	0a1a      	lsrs	r2, r3, #8
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00da      	lsls	r2, r3, #3
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d117      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c18:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e099      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d1da      	bne.n	8002bea <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c76:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002caa:	e042      	b.n	8002d32 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fb33 	bl	800331c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e04c      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d118      	bne.n	8002d32 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f47f ae99 	bne.w	8002a6e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	00010004 	.word	0x00010004
 8002d68:	20000098 	.word	0x20000098
 8002d6c:	14f8b589 	.word	0x14f8b589

08002d70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f960 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc0:	d103      	bne.n	8002dca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e05f      	b.n	8002e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	6a3a      	ldr	r2, [r7, #32]
 8002de2:	492d      	ldr	r1, [pc, #180]	; (8002e98 <I2C_RequestMemoryWrite+0x128>)
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f998 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e04c      	b.n	8002e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fa02 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e02b      	b.n	8002e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3c:	893b      	ldrh	r3, [r7, #8]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	611a      	str	r2, [r3, #16]
 8002e46:	e021      	b.n	8002e8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	6a39      	ldr	r1, [r7, #32]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f9dc 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00d      	beq.n	8002e82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d107      	bne.n	8002e7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e005      	b.n	8002e8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e82:	893b      	ldrh	r3, [r7, #8]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	00010002 	.word	0x00010002

08002e9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8c2 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00d      	beq.n	8002f0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efc:	d103      	bne.n	8002f06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e0aa      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	4952      	ldr	r1, [pc, #328]	; (8003068 <I2C_RequestMemoryRead+0x1cc>)
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f8fa 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e097      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	6a39      	ldr	r1, [r7, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f964 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d107      	bne.n	8002f6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e076      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f78:	893b      	ldrh	r3, [r7, #8]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]
 8002f82:	e021      	b.n	8002fc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f84:	893b      	ldrh	r3, [r7, #8]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f94:	6a39      	ldr	r1, [r7, #32]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f93e 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d107      	bne.n	8002fba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e050      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fbe:	893b      	ldrh	r3, [r7, #8]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f923 	bl	8003218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e035      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003002:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2200      	movs	r2, #0
 800300c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f82b 	bl	800306c <I2C_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302a:	d103      	bne.n	8003034 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e013      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003038:	897b      	ldrh	r3, [r7, #10]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	4906      	ldr	r1, [pc, #24]	; (8003068 <I2C_RequestMemoryRead+0x1cc>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f863 	bl	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	00010002 	.word	0x00010002

0800306c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800307c:	e025      	b.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d021      	beq.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7fe febd 	bl	8001e04 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0220 	orr.w	r2, r3, #32
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e023      	b.n	8003112 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10d      	bne.n	80030f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	e00c      	b.n	800310a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	429a      	cmp	r2, r3
 800310e:	d0b6      	beq.n	800307e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	e051      	b.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003138:	d123      	bne.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003152:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0204 	orr.w	r2, r3, #4
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e046      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d021      	beq.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe fe3b 	bl	8001e04 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e020      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10c      	bne.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e00b      	b.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d18d      	bne.n	800312a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003224:	e02d      	b.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8ce 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e02d      	b.n	8003292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d021      	beq.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe fde1 	bl	8001e04 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d1ca      	bne.n	8003226 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a6:	e02d      	b.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f88d 	bl	80033c8 <I2C_IsAcknowledgeFailed>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e02d      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d021      	beq.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fe fda0 	bl	8001e04 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b04      	cmp	r3, #4
 8003310:	d1ca      	bne.n	80032a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003328:	e042      	b.n	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b10      	cmp	r3, #16
 8003336:	d119      	bne.n	800336c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0210 	mvn.w	r2, #16
 8003340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e029      	b.n	80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336c:	f7fe fd4a 	bl	8001e04 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d302      	bcc.n	8003382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d1b5      	bne.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d11b      	bne.n	8003418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e26c      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8087 	beq.w	8003552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003444:	4b92      	ldr	r3, [pc, #584]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b04      	cmp	r3, #4
 800344e:	d00c      	beq.n	800346a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003450:	4b8f      	ldr	r3, [pc, #572]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	d112      	bne.n	8003482 <HAL_RCC_OscConfig+0x5e>
 800345c:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d10b      	bne.n	8003482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346a:	4b89      	ldr	r3, [pc, #548]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d06c      	beq.n	8003550 <HAL_RCC_OscConfig+0x12c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d168      	bne.n	8003550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e246      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x76>
 800348c:	4b80      	ldr	r3, [pc, #512]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a7f      	ldr	r2, [pc, #508]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	e02e      	b.n	80034f8 <HAL_RCC_OscConfig+0xd4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x98>
 80034a2:	4b7b      	ldr	r3, [pc, #492]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7a      	ldr	r2, [pc, #488]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b78      	ldr	r3, [pc, #480]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a77      	ldr	r2, [pc, #476]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xd4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0xbc>
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a71      	ldr	r2, [pc, #452]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xd4>
 80034e0:	4b6b      	ldr	r3, [pc, #428]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a6a      	ldr	r2, [pc, #424]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a67      	ldr	r2, [pc, #412]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fc80 	bl	8001e04 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe fc7c 	bl	8001e04 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1fa      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xe4>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe fc6c 	bl	8001e04 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fe fc68 	bl	8001e04 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1e6      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x10c>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800355e:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x18c>
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b43      	ldr	r3, [pc, #268]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x176>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1ba      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4939      	ldr	r1, [pc, #228]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e03a      	b.n	8003626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_RCC_OscConfig+0x270>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe fc21 	bl	8001e04 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c6:	f7fe fc1d 	bl	8001e04 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e19b      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4927      	ldr	r1, [pc, #156]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_RCC_OscConfig+0x270>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe fc00 	bl	8001e04 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003608:	f7fe fbfc 	bl	8001e04 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e17a      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03a      	beq.n	80036a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d019      	beq.n	800366e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fe fbe0 	bl	8001e04 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003648:	f7fe fbdc 	bl	8001e04 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e15a      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_RCC_OscConfig+0x26c>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003666:	2001      	movs	r0, #1
 8003668:	f000 fada 	bl	8003c20 <RCC_Delay>
 800366c:	e01c      	b.n	80036a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_RCC_OscConfig+0x274>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003674:	f7fe fbc6 	bl	8001e04 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367a:	e00f      	b.n	800369c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367c:	f7fe fbc2 	bl	8001e04 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d908      	bls.n	800369c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e140      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	42420000 	.word	0x42420000
 8003698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	4b9e      	ldr	r3, [pc, #632]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e9      	bne.n	800367c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a6 	beq.w	8003802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b97      	ldr	r3, [pc, #604]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	4b94      	ldr	r3, [pc, #592]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4a93      	ldr	r2, [pc, #588]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d0:	61d3      	str	r3, [r2, #28]
 80036d2:	4b91      	ldr	r3, [pc, #580]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036de:	2301      	movs	r3, #1
 80036e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b8e      	ldr	r3, [pc, #568]	; (800391c <HAL_RCC_OscConfig+0x4f8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d118      	bne.n	8003720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ee:	4b8b      	ldr	r3, [pc, #556]	; (800391c <HAL_RCC_OscConfig+0x4f8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a8a      	ldr	r2, [pc, #552]	; (800391c <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fa:	f7fe fb83 	bl	8001e04 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003702:	f7fe fb7f 	bl	8001e04 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b64      	cmp	r3, #100	; 0x64
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e0fd      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b81      	ldr	r3, [pc, #516]	; (800391c <HAL_RCC_OscConfig+0x4f8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x312>
 8003728:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4a7a      	ldr	r2, [pc, #488]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	e02d      	b.n	8003792 <HAL_RCC_OscConfig+0x36e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0x334>
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a75      	ldr	r2, [pc, #468]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a72      	ldr	r2, [pc, #456]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6213      	str	r3, [r2, #32]
 8003756:	e01c      	b.n	8003792 <HAL_RCC_OscConfig+0x36e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b05      	cmp	r3, #5
 800375e:	d10c      	bne.n	800377a <HAL_RCC_OscConfig+0x356>
 8003760:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	4a6c      	ldr	r2, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6213      	str	r3, [r2, #32]
 800376c:	4b6a      	ldr	r3, [pc, #424]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a69      	ldr	r2, [pc, #420]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	e00b      	b.n	8003792 <HAL_RCC_OscConfig+0x36e>
 800377a:	4b67      	ldr	r3, [pc, #412]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4a66      	ldr	r2, [pc, #408]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	6213      	str	r3, [r2, #32]
 8003786:	4b64      	ldr	r3, [pc, #400]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	4a63      	ldr	r2, [pc, #396]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800378c:	f023 0304 	bic.w	r3, r3, #4
 8003790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d015      	beq.n	80037c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379a:	f7fe fb33 	bl	8001e04 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fb2f 	bl	8001e04 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e0ab      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ee      	beq.n	80037a2 <HAL_RCC_OscConfig+0x37e>
 80037c4:	e014      	b.n	80037f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fb1d 	bl	8001e04 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fe fb19 	bl	8001e04 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e095      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ee      	bne.n	80037ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f6:	4b48      	ldr	r3, [pc, #288]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4a47      	ldr	r2, [pc, #284]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80037fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8081 	beq.w	800390e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800380c:	4b42      	ldr	r3, [pc, #264]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d061      	beq.n	80038dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d146      	bne.n	80038ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCC_OscConfig+0x4fc>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe faed 	bl	8001e04 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382e:	f7fe fae9 	bl	8001e04 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e067      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	4b35      	ldr	r3, [pc, #212]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d108      	bne.n	8003868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	492d      	ldr	r1, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a19      	ldr	r1, [r3, #32]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	430b      	orrs	r3, r1
 800387a:	4927      	ldr	r1, [pc, #156]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x4fc>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe fabd 	bl	8001e04 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fe fab9 	bl	8001e04 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e037      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x46a>
 80038ac:	e02f      	b.n	800390e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b1c      	ldr	r3, [pc, #112]	; (8003920 <HAL_RCC_OscConfig+0x4fc>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe faa6 	bl	8001e04 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe faa2 	bl	8001e04 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e020      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x498>
 80038da:	e018      	b.n	800390e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e013      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
 8003920:	42420060 	.word	0x42420060

08003924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0d0      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b67      	ldr	r3, [pc, #412]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 0207 	bic.w	r2, r3, #7
 800394e:	4965      	ldr	r1, [pc, #404]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b63      	ldr	r3, [pc, #396]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003980:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a58      	ldr	r2, [pc, #352]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800398a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003998:	4b53      	ldr	r3, [pc, #332]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b50      	ldr	r3, [pc, #320]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	494d      	ldr	r1, [pc, #308]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d040      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d115      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e07f      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b41      	ldr	r3, [pc, #260]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e073      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06b      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f023 0203 	bic.w	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4936      	ldr	r1, [pc, #216]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a14:	f7fe f9f6 	bl	8001e04 <HAL_GetTick>
 8003a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1c:	f7fe f9f2 	bl	8001e04 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e053      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 020c 	and.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d1eb      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a44:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d210      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 0207 	bic.w	r2, r3, #7
 8003a5a:	4922      	ldr	r1, [pc, #136]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e032      	b.n	8003ada <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4916      	ldr	r1, [pc, #88]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	490e      	ldr	r1, [pc, #56]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab2:	f000 f821 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8003aca:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_RCC_ClockConfig+0x1cc>)
 8003acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f954 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	08005d0c 	.word	0x08005d0c
 8003af0:	20000098 	.word	0x20000098
 8003af4:	2000009c 	.word	0x2000009c

08003af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b490      	push	{r4, r7}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b00:	1d3c      	adds	r4, r7, #4
 8003b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x40>
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x46>
 8003b36:	e02d      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b3a:	623b      	str	r3, [r7, #32]
      break;
 8003b3c:	e02d      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	0c9b      	lsrs	r3, r3, #18
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b5c:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c5b      	lsrs	r3, r3, #17
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b76:	fb02 f203 	mul.w	r2, r2, r3
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	e004      	b.n	8003b8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	623b      	str	r3, [r7, #32]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b96:	623b      	str	r3, [r7, #32]
      break;
 8003b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3728      	adds	r7, #40	; 0x28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc90      	pop	{r4, r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	08005cf8 	.word	0x08005cf8
 8003bac:	08005d08 	.word	0x08005d08
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	007a1200 	.word	0x007a1200
 8003bb8:	003d0900 	.word	0x003d0900

08003bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc0:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	20000098 	.word	0x20000098

08003bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd4:	f7ff fff2 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003bd8:	4601      	mov	r1, r0
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be6:	5cd3      	ldrb	r3, [r2, r3]
 8003be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	08005d1c 	.word	0x08005d1c

08003bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bfc:	f7ff ffde 	bl	8003bbc <HAL_RCC_GetHCLKFreq>
 8003c00:	4601      	mov	r1, r0
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	0adb      	lsrs	r3, r3, #11
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0e:	5cd3      	ldrb	r3, [r2, r3]
 8003c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08005d1c 	.word	0x08005d1c

08003c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <RCC_Delay+0x34>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <RCC_Delay+0x38>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	0a5b      	lsrs	r3, r3, #9
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c3c:	bf00      	nop
  }
  while (Delay --);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	60fa      	str	r2, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f9      	bne.n	8003c3c <RCC_Delay+0x1c>
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000098 	.word	0x20000098
 8003c58:	10624dd3 	.word	0x10624dd3

08003c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e041      	b.n	8003cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd ff7e 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 fa1a 	bl	80040d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d122      	bne.n	8003d56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d11b      	bne.n	8003d56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0202 	mvn.w	r2, #2
 8003d26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f9ad 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003d42:	e005      	b.n	8003d50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f9a0 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9af 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d122      	bne.n	8003daa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d11b      	bne.n	8003daa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f06f 0204 	mvn.w	r2, #4
 8003d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f983 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003d96:	e005      	b.n	8003da4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f976 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f985 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d122      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d11b      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0208 	mvn.w	r2, #8
 8003dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f959 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003dea:	e005      	b.n	8003df8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f94c 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f95b 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d122      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d11b      	bne.n	8003e52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0210 	mvn.w	r2, #16
 8003e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2208      	movs	r2, #8
 8003e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f92f 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003e3e:	e005      	b.n	8003e4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f922 	bl	800408a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f931 	bl	80040ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10e      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0201 	mvn.w	r2, #1
 8003e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f8fd 	bl	8004078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	2b80      	cmp	r3, #128	; 0x80
 8003e8a:	d10e      	bne.n	8003eaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d107      	bne.n	8003eaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fa74 	bl	8004392 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d10e      	bne.n	8003ed6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d107      	bne.n	8003ed6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f8f5 	bl	80040c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d10e      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d107      	bne.n	8003f02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f06f 0220 	mvn.w	r2, #32
 8003efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa3f 	bl	8004380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_ConfigClockSource+0x18>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0a6      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x166>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d067      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x120>
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d80b      	bhi.n	8003f76 <HAL_TIM_ConfigClockSource+0x6c>
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d073      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x140>
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d802      	bhi.n	8003f6c <HAL_TIM_ConfigClockSource+0x62>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d06f      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f6a:	e078      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d06c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x140>
 8003f70:	2b30      	cmp	r3, #48	; 0x30
 8003f72:	d06a      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f74:	e073      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f76:	2b70      	cmp	r3, #112	; 0x70
 8003f78:	d00d      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x8c>
 8003f7a:	2b70      	cmp	r3, #112	; 0x70
 8003f7c:	d804      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x7e>
 8003f7e:	2b50      	cmp	r3, #80	; 0x50
 8003f80:	d033      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0xe0>
 8003f82:	2b60      	cmp	r3, #96	; 0x60
 8003f84:	d041      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f86:	e06a      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d066      	beq.n	800405c <HAL_TIM_ConfigClockSource+0x152>
 8003f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f92:	d017      	beq.n	8003fc4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f94:	e063      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6899      	ldr	r1, [r3, #8]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f000 f96e 	bl	8004286 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
      break;
 8003fc2:	e04c      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f000 f957 	bl	8004286 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe6:	609a      	str	r2, [r3, #8]
      break;
 8003fe8:	e039      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 f8ce 	bl	8004198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2150      	movs	r1, #80	; 0x50
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f925 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004008:	e029      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	461a      	mov	r2, r3
 8004018:	f000 f8ec 	bl	80041f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2160      	movs	r1, #96	; 0x60
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f915 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004028:	e019      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	461a      	mov	r2, r3
 8004038:	f000 f8ae 	bl	8004198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2140      	movs	r1, #64	; 0x40
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f905 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8004048:	e009      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f000 f8fc 	bl	8004252 <TIM_ITRx_SetConfig>
        break;
 800405a:	e000      	b.n	800405e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800405c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr

080040c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
	...

080040d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a29      	ldr	r2, [pc, #164]	; (800418c <TIM_Base_SetConfig+0xb8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x30>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x30>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a26      	ldr	r2, [pc, #152]	; (8004190 <TIM_Base_SetConfig+0xbc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x30>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a25      	ldr	r2, [pc, #148]	; (8004194 <TIM_Base_SetConfig+0xc0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1c      	ldr	r2, [pc, #112]	; (800418c <TIM_Base_SetConfig+0xb8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00b      	beq.n	8004136 <TIM_Base_SetConfig+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d007      	beq.n	8004136 <TIM_Base_SetConfig+0x62>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <TIM_Base_SetConfig+0xbc>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_Base_SetConfig+0x62>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <TIM_Base_SetConfig+0xc0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d108      	bne.n	8004148 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a07      	ldr	r2, [pc, #28]	; (800418c <TIM_Base_SetConfig+0xb8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d103      	bne.n	800417c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	615a      	str	r2, [r3, #20]
}
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	40012c00 	.word	0x40012c00
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800

08004198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	621a      	str	r2, [r3, #32]
}
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f023 0210 	bic.w	r2, r3, #16
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	031b      	lsls	r3, r3, #12
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr

08004286 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004286:	b480      	push	{r7}
 8004288:	b087      	sub	sp, #28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	021a      	lsls	r2, r3, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	609a      	str	r2, [r3, #8]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d8:	2302      	movs	r3, #2
 80042da:	e046      	b.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d009      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a12      	ldr	r2, [pc, #72]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a10      	ldr	r2, [pc, #64]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10c      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	4313      	orrs	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800

08004380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e03f      	b.n	8004436 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd fc48 	bl	8001c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2224      	movs	r2, #36	; 0x24
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fc27 	bl	8004c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800440c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800441c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b08a      	sub	sp, #40	; 0x28
 8004442:	af02      	add	r7, sp, #8
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b20      	cmp	r3, #32
 800445c:	d17c      	bne.n	8004558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_UART_Transmit+0x2c>
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e075      	b.n	800455a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_UART_Transmit+0x3e>
 8004478:	2302      	movs	r3, #2
 800447a:	e06e      	b.n	800455a <HAL_UART_Transmit+0x11c>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2221      	movs	r2, #33	; 0x21
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004492:	f7fd fcb7 	bl	8001e04 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ac:	d108      	bne.n	80044c0 <HAL_UART_Transmit+0x82>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e003      	b.n	80044c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044d0:	e02a      	b.n	8004528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fa13 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e036      	b.n	800455a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	3302      	adds	r3, #2
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	e007      	b.n	800451a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3301      	adds	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1cf      	bne.n	80044d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2200      	movs	r2, #0
 800453a:	2140      	movs	r1, #64	; 0x40
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f9e3 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e006      	b.n	800455a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_UART_IRQHandler+0x52>
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa9b 	bl	8004aea <UART_Receive_IT>
      return;
 80045b4:	e17c      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80b1 	beq.w	8004720 <HAL_UART_IRQHandler+0x1bc>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_UART_IRQHandler+0x70>
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a6 	beq.w	8004720 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_UART_IRQHandler+0x90>
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_UART_IRQHandler+0xb0>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0202 	orr.w	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_UART_IRQHandler+0xd0>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	f043 0204 	orr.w	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <HAL_UART_IRQHandler+0xfa>
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_UART_IRQHandler+0xee>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0208 	orr.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 811f 	beq.w	80048a6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_UART_IRQHandler+0x11e>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa34 	bl	8004aea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <HAL_UART_IRQHandler+0x146>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d031      	beq.n	800470e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f976 	bl	800499c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d023      	beq.n	8004706 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	4a77      	ldr	r2, [pc, #476]	; (80048b8 <HAL_UART_IRQHandler+0x354>)
 80046dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd fce0 	bl	80020a8 <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00e      	b.n	800471c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8ee 	bl	80048e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00a      	b.n	800471c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8ea 	bl	80048e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e006      	b.n	800471c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8e6 	bl	80048e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800471a:	e0c4      	b.n	80048a6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	bf00      	nop
    return;
 800471e:	e0c2      	b.n	80048a6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 80a1 	bne.w	800486c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 809b 	beq.w	800486c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8095 	beq.w	800486c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d04e      	beq.n	8004804 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004770:	8a3b      	ldrh	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8099 	beq.w	80048aa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477c:	8a3a      	ldrh	r2, [r7, #16]
 800477e:	429a      	cmp	r2, r3
 8004780:	f080 8093 	bcs.w	80048aa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8a3a      	ldrh	r2, [r7, #16]
 8004788:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b20      	cmp	r3, #32
 8004792:	d02b      	beq.n	80047ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0210 	bic.w	r2, r2, #16
 80047e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fc23 	bl	8002032 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f878 	bl	80048f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004802:	e052      	b.n	80048aa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800480c:	b29b      	uxth	r3, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d048      	beq.n	80048ae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800481c:	8a7b      	ldrh	r3, [r7, #18]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d045      	beq.n	80048ae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004830:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0210 	bic.w	r2, r2, #16
 800485e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004860:	8a7b      	ldrh	r3, [r7, #18]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f844 	bl	80048f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800486a:	e020      	b.n	80048ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_UART_IRQHandler+0x324>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f8cb 	bl	8004a1c <UART_Transmit_IT>
    return;
 8004886:	e013      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <HAL_UART_IRQHandler+0x34c>
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f90c 	bl	8004aba <UART_EndTransmit_IT>
    return;
 80048a2:	bf00      	nop
 80048a4:	e004      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
    return;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80048ae:	bf00      	nop
  }
}
 80048b0:	3728      	adds	r7, #40	; 0x28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	080049f5 	.word	0x080049f5

080048bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	e02c      	b.n	8004974 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d028      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <UART_WaitOnFlagUntilTimeout+0x30>
 8004928:	f7fd fa6c 	bl	8001e04 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	d21d      	bcs.n	8004974 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004946:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e00f      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	429a      	cmp	r2, r3
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	d0c3      	beq.n	800491a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0210 	bic.w	r2, r2, #16
 80049da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff ff66 	bl	80048e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b21      	cmp	r3, #33	; 0x21
 8004a2e:	d13e      	bne.n	8004aae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d114      	bne.n	8004a64 <UART_Transmit_IT+0x48>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d110      	bne.n	8004a64 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	621a      	str	r2, [r3, #32]
 8004a62:	e008      	b.n	8004a76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	1c59      	adds	r1, r3, #1
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6211      	str	r1, [r2, #32]
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff feee 	bl	80048bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b22      	cmp	r3, #34	; 0x22
 8004afc:	f040 8099 	bne.w	8004c32 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d117      	bne.n	8004b3a <UART_Receive_IT+0x50>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d113      	bne.n	8004b3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	1c9a      	adds	r2, r3, #2
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
 8004b38:	e026      	b.n	8004b88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4c:	d007      	beq.n	8004b5e <UART_Receive_IT+0x74>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <UART_Receive_IT+0x82>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	e008      	b.n	8004b7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4619      	mov	r1, r3
 8004b96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d148      	bne.n	8004c2e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0220 	bic.w	r2, r2, #32
 8004baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d123      	bne.n	8004c24 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0210 	bic.w	r2, r2, #16
 8004bf0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d10a      	bne.n	8004c16 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fe68 	bl	80048f2 <HAL_UARTEx_RxEventCallback>
 8004c22:	e002      	b.n	8004c2a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff fe52 	bl	80048ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e002      	b.n	8004c34 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c76:	f023 030c 	bic.w	r3, r3, #12
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2c      	ldr	r2, [pc, #176]	; (8004d50 <UART_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fe ffa8 	bl	8003bf8 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	e002      	b.n	8004cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe ff90 	bl	8003bd0 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <UART_SetConfig+0x118>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	0119      	lsls	r1, r3, #4
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <UART_SetConfig+0x118>)
 8004cea:	fba3 0302 	umull	r0, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2064      	movs	r0, #100	; 0x64
 8004cf2:	fb00 f303 	mul.w	r3, r0, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <UART_SetConfig+0x118>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d08:	4419      	add	r1, r3
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <UART_SetConfig+0x118>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2064      	movs	r0, #100	; 0x64
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	440a      	add	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40013800 	.word	0x40013800
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	200000a4 	.word	0x200000a4

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	2500      	movs	r5, #0
 8004d68:	4e0c      	ldr	r6, [pc, #48]	; (8004d9c <__libc_init_array+0x38>)
 8004d6a:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6c:	1ba4      	subs	r4, r4, r6
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	42a5      	cmp	r5, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	f000 ffa4 	bl	8005cc0 <_init>
 8004d78:	2500      	movs	r5, #0
 8004d7a:	4e0a      	ldr	r6, [pc, #40]	; (8004da4 <__libc_init_array+0x40>)
 8004d7c:	4c0a      	ldr	r4, [pc, #40]	; (8004da8 <__libc_init_array+0x44>)
 8004d7e:	1ba4      	subs	r4, r4, r6
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	42a5      	cmp	r5, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d8c:	4798      	blx	r3
 8004d8e:	3501      	adds	r5, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d96:	4798      	blx	r3
 8004d98:	3501      	adds	r5, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08005da0 	.word	0x08005da0
 8004da0:	08005da0 	.word	0x08005da0
 8004da4:	08005da0 	.word	0x08005da0
 8004da8:	08005da4 	.word	0x08005da4

08004dac <memset>:
 8004dac:	4603      	mov	r3, r0
 8004dae:	4402      	add	r2, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <siprintf>:
 8004dbc:	b40e      	push	{r1, r2, r3}
 8004dbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dc2:	b500      	push	{lr}
 8004dc4:	b09c      	sub	sp, #112	; 0x70
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	9107      	str	r1, [sp, #28]
 8004dce:	9104      	str	r1, [sp, #16]
 8004dd0:	4808      	ldr	r0, [pc, #32]	; (8004df4 <siprintf+0x38>)
 8004dd2:	4909      	ldr	r1, [pc, #36]	; (8004df8 <siprintf+0x3c>)
 8004dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd8:	9105      	str	r1, [sp, #20]
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	a902      	add	r1, sp, #8
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	f000 f866 	bl	8004eb0 <_svfiprintf_r>
 8004de4:	2200      	movs	r2, #0
 8004de6:	9b02      	ldr	r3, [sp, #8]
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	b01c      	add	sp, #112	; 0x70
 8004dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df0:	b003      	add	sp, #12
 8004df2:	4770      	bx	lr
 8004df4:	200000a4 	.word	0x200000a4
 8004df8:	ffff0208 	.word	0xffff0208

08004dfc <__ssputs_r>:
 8004dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	688e      	ldr	r6, [r1, #8]
 8004e02:	4682      	mov	sl, r0
 8004e04:	429e      	cmp	r6, r3
 8004e06:	460c      	mov	r4, r1
 8004e08:	4690      	mov	r8, r2
 8004e0a:	4699      	mov	r9, r3
 8004e0c:	d837      	bhi.n	8004e7e <__ssputs_r+0x82>
 8004e0e:	898a      	ldrh	r2, [r1, #12]
 8004e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e14:	d031      	beq.n	8004e7a <__ssputs_r+0x7e>
 8004e16:	2302      	movs	r3, #2
 8004e18:	6825      	ldr	r5, [r4, #0]
 8004e1a:	6909      	ldr	r1, [r1, #16]
 8004e1c:	1a6f      	subs	r7, r5, r1
 8004e1e:	6965      	ldr	r5, [r4, #20]
 8004e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e24:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e28:	f109 0301 	add.w	r3, r9, #1
 8004e2c:	443b      	add	r3, r7
 8004e2e:	429d      	cmp	r5, r3
 8004e30:	bf38      	it	cc
 8004e32:	461d      	movcc	r5, r3
 8004e34:	0553      	lsls	r3, r2, #21
 8004e36:	d530      	bpl.n	8004e9a <__ssputs_r+0x9e>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f000 fb37 	bl	80054ac <_malloc_r>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	b950      	cbnz	r0, 8004e58 <__ssputs_r+0x5c>
 8004e42:	230c      	movs	r3, #12
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	f8ca 3000 	str.w	r3, [sl]
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e58:	463a      	mov	r2, r7
 8004e5a:	6921      	ldr	r1, [r4, #16]
 8004e5c:	f000 fab6 	bl	80053cc <memcpy>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	6126      	str	r6, [r4, #16]
 8004e6e:	443e      	add	r6, r7
 8004e70:	6026      	str	r6, [r4, #0]
 8004e72:	464e      	mov	r6, r9
 8004e74:	6165      	str	r5, [r4, #20]
 8004e76:	1bed      	subs	r5, r5, r7
 8004e78:	60a5      	str	r5, [r4, #8]
 8004e7a:	454e      	cmp	r6, r9
 8004e7c:	d900      	bls.n	8004e80 <__ssputs_r+0x84>
 8004e7e:	464e      	mov	r6, r9
 8004e80:	4632      	mov	r2, r6
 8004e82:	4641      	mov	r1, r8
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f000 faac 	bl	80053e2 <memmove>
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	1b9b      	subs	r3, r3, r6
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	441e      	add	r6, r3
 8004e96:	6026      	str	r6, [r4, #0]
 8004e98:	e7dc      	b.n	8004e54 <__ssputs_r+0x58>
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	f000 fb60 	bl	8005560 <_realloc_r>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d1e2      	bne.n	8004e6c <__ssputs_r+0x70>
 8004ea6:	6921      	ldr	r1, [r4, #16]
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	f000 fab3 	bl	8005414 <_free_r>
 8004eae:	e7c8      	b.n	8004e42 <__ssputs_r+0x46>

08004eb0 <_svfiprintf_r>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	898b      	ldrh	r3, [r1, #12]
 8004eb8:	b09d      	sub	sp, #116	; 0x74
 8004eba:	061f      	lsls	r7, r3, #24
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	d50f      	bpl.n	8004ee4 <_svfiprintf_r+0x34>
 8004ec4:	690b      	ldr	r3, [r1, #16]
 8004ec6:	b96b      	cbnz	r3, 8004ee4 <_svfiprintf_r+0x34>
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	f000 faef 	bl	80054ac <_malloc_r>
 8004ece:	6020      	str	r0, [r4, #0]
 8004ed0:	6120      	str	r0, [r4, #16]
 8004ed2:	b928      	cbnz	r0, 8004ee0 <_svfiprintf_r+0x30>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	f8c8 3000 	str.w	r3, [r8]
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	e0c8      	b.n	8005072 <_svfiprintf_r+0x1c2>
 8004ee0:	2340      	movs	r3, #64	; 0x40
 8004ee2:	6163      	str	r3, [r4, #20]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	2320      	movs	r3, #32
 8004eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eee:	2330      	movs	r3, #48	; 0x30
 8004ef0:	f04f 0b01 	mov.w	fp, #1
 8004ef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef8:	9503      	str	r5, [sp, #12]
 8004efa:	4637      	mov	r7, r6
 8004efc:	463d      	mov	r5, r7
 8004efe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f02:	b10b      	cbz	r3, 8004f08 <_svfiprintf_r+0x58>
 8004f04:	2b25      	cmp	r3, #37	; 0x25
 8004f06:	d13e      	bne.n	8004f86 <_svfiprintf_r+0xd6>
 8004f08:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f0c:	d00b      	beq.n	8004f26 <_svfiprintf_r+0x76>
 8004f0e:	4653      	mov	r3, sl
 8004f10:	4632      	mov	r2, r6
 8004f12:	4621      	mov	r1, r4
 8004f14:	4640      	mov	r0, r8
 8004f16:	f7ff ff71 	bl	8004dfc <__ssputs_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f000 80a4 	beq.w	8005068 <_svfiprintf_r+0x1b8>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	4453      	add	r3, sl
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	783b      	ldrb	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 809d 	beq.w	8005068 <_svfiprintf_r+0x1b8>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	9307      	str	r3, [sp, #28]
 8004f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f40:	931a      	str	r3, [sp, #104]	; 0x68
 8004f42:	462f      	mov	r7, r5
 8004f44:	2205      	movs	r2, #5
 8004f46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f4a:	4850      	ldr	r0, [pc, #320]	; (800508c <_svfiprintf_r+0x1dc>)
 8004f4c:	f000 fa30 	bl	80053b0 <memchr>
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	b9d0      	cbnz	r0, 8004f8a <_svfiprintf_r+0xda>
 8004f54:	06d9      	lsls	r1, r3, #27
 8004f56:	bf44      	itt	mi
 8004f58:	2220      	movmi	r2, #32
 8004f5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f5e:	071a      	lsls	r2, r3, #28
 8004f60:	bf44      	itt	mi
 8004f62:	222b      	movmi	r2, #43	; 0x2b
 8004f64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f68:	782a      	ldrb	r2, [r5, #0]
 8004f6a:	2a2a      	cmp	r2, #42	; 0x2a
 8004f6c:	d015      	beq.n	8004f9a <_svfiprintf_r+0xea>
 8004f6e:	462f      	mov	r7, r5
 8004f70:	2000      	movs	r0, #0
 8004f72:	250a      	movs	r5, #10
 8004f74:	9a07      	ldr	r2, [sp, #28]
 8004f76:	4639      	mov	r1, r7
 8004f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f7c:	3b30      	subs	r3, #48	; 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d94d      	bls.n	800501e <_svfiprintf_r+0x16e>
 8004f82:	b1b8      	cbz	r0, 8004fb4 <_svfiprintf_r+0x104>
 8004f84:	e00f      	b.n	8004fa6 <_svfiprintf_r+0xf6>
 8004f86:	462f      	mov	r7, r5
 8004f88:	e7b8      	b.n	8004efc <_svfiprintf_r+0x4c>
 8004f8a:	4a40      	ldr	r2, [pc, #256]	; (800508c <_svfiprintf_r+0x1dc>)
 8004f8c:	463d      	mov	r5, r7
 8004f8e:	1a80      	subs	r0, r0, r2
 8004f90:	fa0b f000 	lsl.w	r0, fp, r0
 8004f94:	4318      	orrs	r0, r3
 8004f96:	9004      	str	r0, [sp, #16]
 8004f98:	e7d3      	b.n	8004f42 <_svfiprintf_r+0x92>
 8004f9a:	9a03      	ldr	r2, [sp, #12]
 8004f9c:	1d11      	adds	r1, r2, #4
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	9103      	str	r1, [sp, #12]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	db01      	blt.n	8004faa <_svfiprintf_r+0xfa>
 8004fa6:	9207      	str	r2, [sp, #28]
 8004fa8:	e004      	b.n	8004fb4 <_svfiprintf_r+0x104>
 8004faa:	4252      	negs	r2, r2
 8004fac:	f043 0302 	orr.w	r3, r3, #2
 8004fb0:	9207      	str	r2, [sp, #28]
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	783b      	ldrb	r3, [r7, #0]
 8004fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb8:	d10c      	bne.n	8004fd4 <_svfiprintf_r+0x124>
 8004fba:	787b      	ldrb	r3, [r7, #1]
 8004fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fbe:	d133      	bne.n	8005028 <_svfiprintf_r+0x178>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	3702      	adds	r7, #2
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	9203      	str	r2, [sp, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfb8      	it	lt
 8004fce:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	4d2e      	ldr	r5, [pc, #184]	; (8005090 <_svfiprintf_r+0x1e0>)
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	7839      	ldrb	r1, [r7, #0]
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 f9e8 	bl	80053b0 <memchr>
 8004fe0:	b138      	cbz	r0, 8004ff2 <_svfiprintf_r+0x142>
 8004fe2:	2340      	movs	r3, #64	; 0x40
 8004fe4:	1b40      	subs	r0, r0, r5
 8004fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8004fea:	9b04      	ldr	r3, [sp, #16]
 8004fec:	3701      	adds	r7, #1
 8004fee:	4303      	orrs	r3, r0
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	7839      	ldrb	r1, [r7, #0]
 8004ff4:	2206      	movs	r2, #6
 8004ff6:	4827      	ldr	r0, [pc, #156]	; (8005094 <_svfiprintf_r+0x1e4>)
 8004ff8:	1c7e      	adds	r6, r7, #1
 8004ffa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ffe:	f000 f9d7 	bl	80053b0 <memchr>
 8005002:	2800      	cmp	r0, #0
 8005004:	d038      	beq.n	8005078 <_svfiprintf_r+0x1c8>
 8005006:	4b24      	ldr	r3, [pc, #144]	; (8005098 <_svfiprintf_r+0x1e8>)
 8005008:	bb13      	cbnz	r3, 8005050 <_svfiprintf_r+0x1a0>
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	3307      	adds	r3, #7
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	3308      	adds	r3, #8
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005018:	444b      	add	r3, r9
 800501a:	9309      	str	r3, [sp, #36]	; 0x24
 800501c:	e76d      	b.n	8004efa <_svfiprintf_r+0x4a>
 800501e:	fb05 3202 	mla	r2, r5, r2, r3
 8005022:	2001      	movs	r0, #1
 8005024:	460f      	mov	r7, r1
 8005026:	e7a6      	b.n	8004f76 <_svfiprintf_r+0xc6>
 8005028:	2300      	movs	r3, #0
 800502a:	250a      	movs	r5, #10
 800502c:	4619      	mov	r1, r3
 800502e:	3701      	adds	r7, #1
 8005030:	9305      	str	r3, [sp, #20]
 8005032:	4638      	mov	r0, r7
 8005034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005038:	3a30      	subs	r2, #48	; 0x30
 800503a:	2a09      	cmp	r2, #9
 800503c:	d903      	bls.n	8005046 <_svfiprintf_r+0x196>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0c8      	beq.n	8004fd4 <_svfiprintf_r+0x124>
 8005042:	9105      	str	r1, [sp, #20]
 8005044:	e7c6      	b.n	8004fd4 <_svfiprintf_r+0x124>
 8005046:	fb05 2101 	mla	r1, r5, r1, r2
 800504a:	2301      	movs	r3, #1
 800504c:	4607      	mov	r7, r0
 800504e:	e7f0      	b.n	8005032 <_svfiprintf_r+0x182>
 8005050:	ab03      	add	r3, sp, #12
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	4622      	mov	r2, r4
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <_svfiprintf_r+0x1ec>)
 8005058:	a904      	add	r1, sp, #16
 800505a:	4640      	mov	r0, r8
 800505c:	f3af 8000 	nop.w
 8005060:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005064:	4681      	mov	r9, r0
 8005066:	d1d6      	bne.n	8005016 <_svfiprintf_r+0x166>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	065b      	lsls	r3, r3, #25
 800506c:	f53f af35 	bmi.w	8004eda <_svfiprintf_r+0x2a>
 8005070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005072:	b01d      	add	sp, #116	; 0x74
 8005074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4622      	mov	r2, r4
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <_svfiprintf_r+0x1ec>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	4640      	mov	r0, r8
 8005084:	f000 f882 	bl	800518c <_printf_i>
 8005088:	e7ea      	b.n	8005060 <_svfiprintf_r+0x1b0>
 800508a:	bf00      	nop
 800508c:	08005d24 	.word	0x08005d24
 8005090:	08005d2a 	.word	0x08005d2a
 8005094:	08005d2e 	.word	0x08005d2e
 8005098:	00000000 	.word	0x00000000
 800509c:	08004dfd 	.word	0x08004dfd

080050a0 <_printf_common>:
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	4691      	mov	r9, r2
 80050a6:	461f      	mov	r7, r3
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	690b      	ldr	r3, [r1, #16]
 80050ac:	4606      	mov	r6, r0
 80050ae:	4293      	cmp	r3, r2
 80050b0:	bfb8      	it	lt
 80050b2:	4613      	movlt	r3, r2
 80050b4:	f8c9 3000 	str.w	r3, [r9]
 80050b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050bc:	460c      	mov	r4, r1
 80050be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050c2:	b112      	cbz	r2, 80050ca <_printf_common+0x2a>
 80050c4:	3301      	adds	r3, #1
 80050c6:	f8c9 3000 	str.w	r3, [r9]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	0699      	lsls	r1, r3, #26
 80050ce:	bf42      	ittt	mi
 80050d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050d4:	3302      	addmi	r3, #2
 80050d6:	f8c9 3000 	strmi.w	r3, [r9]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	f015 0506 	ands.w	r5, r5, #6
 80050e0:	d107      	bne.n	80050f2 <_printf_common+0x52>
 80050e2:	f104 0a19 	add.w	sl, r4, #25
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	f8d9 2000 	ldr.w	r2, [r9]
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	42ab      	cmp	r3, r5
 80050f0:	dc29      	bgt.n	8005146 <_printf_common+0xa6>
 80050f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	3300      	adds	r3, #0
 80050fa:	bf18      	it	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	0692      	lsls	r2, r2, #26
 8005100:	d42e      	bmi.n	8005160 <_printf_common+0xc0>
 8005102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005106:	4639      	mov	r1, r7
 8005108:	4630      	mov	r0, r6
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d021      	beq.n	8005154 <_printf_common+0xb4>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	68e5      	ldr	r5, [r4, #12]
 8005114:	f003 0306 	and.w	r3, r3, #6
 8005118:	2b04      	cmp	r3, #4
 800511a:	bf18      	it	ne
 800511c:	2500      	movne	r5, #0
 800511e:	f8d9 2000 	ldr.w	r2, [r9]
 8005122:	f04f 0900 	mov.w	r9, #0
 8005126:	bf08      	it	eq
 8005128:	1aad      	subeq	r5, r5, r2
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	6922      	ldr	r2, [r4, #16]
 800512e:	bf08      	it	eq
 8005130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005134:	4293      	cmp	r3, r2
 8005136:	bfc4      	itt	gt
 8005138:	1a9b      	subgt	r3, r3, r2
 800513a:	18ed      	addgt	r5, r5, r3
 800513c:	341a      	adds	r4, #26
 800513e:	454d      	cmp	r5, r9
 8005140:	d11a      	bne.n	8005178 <_printf_common+0xd8>
 8005142:	2000      	movs	r0, #0
 8005144:	e008      	b.n	8005158 <_printf_common+0xb8>
 8005146:	2301      	movs	r3, #1
 8005148:	4652      	mov	r2, sl
 800514a:	4639      	mov	r1, r7
 800514c:	4630      	mov	r0, r6
 800514e:	47c0      	blx	r8
 8005150:	3001      	adds	r0, #1
 8005152:	d103      	bne.n	800515c <_printf_common+0xbc>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515c:	3501      	adds	r5, #1
 800515e:	e7c2      	b.n	80050e6 <_printf_common+0x46>
 8005160:	2030      	movs	r0, #48	; 0x30
 8005162:	18e1      	adds	r1, r4, r3
 8005164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516e:	4422      	add	r2, r4
 8005170:	3302      	adds	r3, #2
 8005172:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005176:	e7c4      	b.n	8005102 <_printf_common+0x62>
 8005178:	2301      	movs	r3, #1
 800517a:	4622      	mov	r2, r4
 800517c:	4639      	mov	r1, r7
 800517e:	4630      	mov	r0, r6
 8005180:	47c0      	blx	r8
 8005182:	3001      	adds	r0, #1
 8005184:	d0e6      	beq.n	8005154 <_printf_common+0xb4>
 8005186:	f109 0901 	add.w	r9, r9, #1
 800518a:	e7d8      	b.n	800513e <_printf_common+0x9e>

0800518c <_printf_i>:
 800518c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005194:	460c      	mov	r4, r1
 8005196:	7e09      	ldrb	r1, [r1, #24]
 8005198:	b085      	sub	sp, #20
 800519a:	296e      	cmp	r1, #110	; 0x6e
 800519c:	4617      	mov	r7, r2
 800519e:	4606      	mov	r6, r0
 80051a0:	4698      	mov	r8, r3
 80051a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051a4:	f000 80b3 	beq.w	800530e <_printf_i+0x182>
 80051a8:	d822      	bhi.n	80051f0 <_printf_i+0x64>
 80051aa:	2963      	cmp	r1, #99	; 0x63
 80051ac:	d036      	beq.n	800521c <_printf_i+0x90>
 80051ae:	d80a      	bhi.n	80051c6 <_printf_i+0x3a>
 80051b0:	2900      	cmp	r1, #0
 80051b2:	f000 80b9 	beq.w	8005328 <_printf_i+0x19c>
 80051b6:	2958      	cmp	r1, #88	; 0x58
 80051b8:	f000 8083 	beq.w	80052c2 <_printf_i+0x136>
 80051bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051c4:	e032      	b.n	800522c <_printf_i+0xa0>
 80051c6:	2964      	cmp	r1, #100	; 0x64
 80051c8:	d001      	beq.n	80051ce <_printf_i+0x42>
 80051ca:	2969      	cmp	r1, #105	; 0x69
 80051cc:	d1f6      	bne.n	80051bc <_printf_i+0x30>
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	0605      	lsls	r5, r0, #24
 80051d4:	f103 0104 	add.w	r1, r3, #4
 80051d8:	d52a      	bpl.n	8005230 <_printf_i+0xa4>
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6011      	str	r1, [r2, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da03      	bge.n	80051ea <_printf_i+0x5e>
 80051e2:	222d      	movs	r2, #45	; 0x2d
 80051e4:	425b      	negs	r3, r3
 80051e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051ea:	486f      	ldr	r0, [pc, #444]	; (80053a8 <_printf_i+0x21c>)
 80051ec:	220a      	movs	r2, #10
 80051ee:	e039      	b.n	8005264 <_printf_i+0xd8>
 80051f0:	2973      	cmp	r1, #115	; 0x73
 80051f2:	f000 809d 	beq.w	8005330 <_printf_i+0x1a4>
 80051f6:	d808      	bhi.n	800520a <_printf_i+0x7e>
 80051f8:	296f      	cmp	r1, #111	; 0x6f
 80051fa:	d020      	beq.n	800523e <_printf_i+0xb2>
 80051fc:	2970      	cmp	r1, #112	; 0x70
 80051fe:	d1dd      	bne.n	80051bc <_printf_i+0x30>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	f043 0320 	orr.w	r3, r3, #32
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	e003      	b.n	8005212 <_printf_i+0x86>
 800520a:	2975      	cmp	r1, #117	; 0x75
 800520c:	d017      	beq.n	800523e <_printf_i+0xb2>
 800520e:	2978      	cmp	r1, #120	; 0x78
 8005210:	d1d4      	bne.n	80051bc <_printf_i+0x30>
 8005212:	2378      	movs	r3, #120	; 0x78
 8005214:	4865      	ldr	r0, [pc, #404]	; (80053ac <_printf_i+0x220>)
 8005216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800521a:	e055      	b.n	80052c8 <_printf_i+0x13c>
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005222:	1d19      	adds	r1, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6011      	str	r1, [r2, #0]
 8005228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800522c:	2301      	movs	r3, #1
 800522e:	e08c      	b.n	800534a <_printf_i+0x1be>
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005236:	6011      	str	r1, [r2, #0]
 8005238:	bf18      	it	ne
 800523a:	b21b      	sxthne	r3, r3
 800523c:	e7cf      	b.n	80051de <_printf_i+0x52>
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	6825      	ldr	r5, [r4, #0]
 8005242:	1d18      	adds	r0, r3, #4
 8005244:	6010      	str	r0, [r2, #0]
 8005246:	0628      	lsls	r0, r5, #24
 8005248:	d501      	bpl.n	800524e <_printf_i+0xc2>
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	e002      	b.n	8005254 <_printf_i+0xc8>
 800524e:	0668      	lsls	r0, r5, #25
 8005250:	d5fb      	bpl.n	800524a <_printf_i+0xbe>
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	296f      	cmp	r1, #111	; 0x6f
 8005256:	bf14      	ite	ne
 8005258:	220a      	movne	r2, #10
 800525a:	2208      	moveq	r2, #8
 800525c:	4852      	ldr	r0, [pc, #328]	; (80053a8 <_printf_i+0x21c>)
 800525e:	2100      	movs	r1, #0
 8005260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005264:	6865      	ldr	r5, [r4, #4]
 8005266:	2d00      	cmp	r5, #0
 8005268:	60a5      	str	r5, [r4, #8]
 800526a:	f2c0 8095 	blt.w	8005398 <_printf_i+0x20c>
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	f021 0104 	bic.w	r1, r1, #4
 8005274:	6021      	str	r1, [r4, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d13d      	bne.n	80052f6 <_printf_i+0x16a>
 800527a:	2d00      	cmp	r5, #0
 800527c:	f040 808e 	bne.w	800539c <_printf_i+0x210>
 8005280:	4665      	mov	r5, ip
 8005282:	2a08      	cmp	r2, #8
 8005284:	d10b      	bne.n	800529e <_printf_i+0x112>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	07db      	lsls	r3, r3, #31
 800528a:	d508      	bpl.n	800529e <_printf_i+0x112>
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	6862      	ldr	r2, [r4, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	bfde      	ittt	le
 8005294:	2330      	movle	r3, #48	; 0x30
 8005296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800529a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800529e:	ebac 0305 	sub.w	r3, ip, r5
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	f8cd 8000 	str.w	r8, [sp]
 80052a8:	463b      	mov	r3, r7
 80052aa:	aa03      	add	r2, sp, #12
 80052ac:	4621      	mov	r1, r4
 80052ae:	4630      	mov	r0, r6
 80052b0:	f7ff fef6 	bl	80050a0 <_printf_common>
 80052b4:	3001      	adds	r0, #1
 80052b6:	d14d      	bne.n	8005354 <_printf_i+0x1c8>
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	b005      	add	sp, #20
 80052be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052c2:	4839      	ldr	r0, [pc, #228]	; (80053a8 <_printf_i+0x21c>)
 80052c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	1d1d      	adds	r5, r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6015      	str	r5, [r2, #0]
 80052d2:	060a      	lsls	r2, r1, #24
 80052d4:	d50b      	bpl.n	80052ee <_printf_i+0x162>
 80052d6:	07ca      	lsls	r2, r1, #31
 80052d8:	bf44      	itt	mi
 80052da:	f041 0120 	orrmi.w	r1, r1, #32
 80052de:	6021      	strmi	r1, [r4, #0]
 80052e0:	b91b      	cbnz	r3, 80052ea <_printf_i+0x15e>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	f022 0220 	bic.w	r2, r2, #32
 80052e8:	6022      	str	r2, [r4, #0]
 80052ea:	2210      	movs	r2, #16
 80052ec:	e7b7      	b.n	800525e <_printf_i+0xd2>
 80052ee:	064d      	lsls	r5, r1, #25
 80052f0:	bf48      	it	mi
 80052f2:	b29b      	uxthmi	r3, r3
 80052f4:	e7ef      	b.n	80052d6 <_printf_i+0x14a>
 80052f6:	4665      	mov	r5, ip
 80052f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052fc:	fb02 3311 	mls	r3, r2, r1, r3
 8005300:	5cc3      	ldrb	r3, [r0, r3]
 8005302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005306:	460b      	mov	r3, r1
 8005308:	2900      	cmp	r1, #0
 800530a:	d1f5      	bne.n	80052f8 <_printf_i+0x16c>
 800530c:	e7b9      	b.n	8005282 <_printf_i+0xf6>
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	6825      	ldr	r5, [r4, #0]
 8005312:	1d18      	adds	r0, r3, #4
 8005314:	6961      	ldr	r1, [r4, #20]
 8005316:	6010      	str	r0, [r2, #0]
 8005318:	0628      	lsls	r0, r5, #24
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	d501      	bpl.n	8005322 <_printf_i+0x196>
 800531e:	6019      	str	r1, [r3, #0]
 8005320:	e002      	b.n	8005328 <_printf_i+0x19c>
 8005322:	066a      	lsls	r2, r5, #25
 8005324:	d5fb      	bpl.n	800531e <_printf_i+0x192>
 8005326:	8019      	strh	r1, [r3, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	4665      	mov	r5, ip
 800532c:	6123      	str	r3, [r4, #16]
 800532e:	e7b9      	b.n	80052a4 <_printf_i+0x118>
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	1d19      	adds	r1, r3, #4
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	681d      	ldr	r5, [r3, #0]
 8005338:	6862      	ldr	r2, [r4, #4]
 800533a:	2100      	movs	r1, #0
 800533c:	4628      	mov	r0, r5
 800533e:	f000 f837 	bl	80053b0 <memchr>
 8005342:	b108      	cbz	r0, 8005348 <_printf_i+0x1bc>
 8005344:	1b40      	subs	r0, r0, r5
 8005346:	6060      	str	r0, [r4, #4]
 8005348:	6863      	ldr	r3, [r4, #4]
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	2300      	movs	r3, #0
 800534e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005352:	e7a7      	b.n	80052a4 <_printf_i+0x118>
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	462a      	mov	r2, r5
 8005358:	4639      	mov	r1, r7
 800535a:	4630      	mov	r0, r6
 800535c:	47c0      	blx	r8
 800535e:	3001      	adds	r0, #1
 8005360:	d0aa      	beq.n	80052b8 <_printf_i+0x12c>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	079b      	lsls	r3, r3, #30
 8005366:	d413      	bmi.n	8005390 <_printf_i+0x204>
 8005368:	68e0      	ldr	r0, [r4, #12]
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	4298      	cmp	r0, r3
 800536e:	bfb8      	it	lt
 8005370:	4618      	movlt	r0, r3
 8005372:	e7a3      	b.n	80052bc <_printf_i+0x130>
 8005374:	2301      	movs	r3, #1
 8005376:	464a      	mov	r2, r9
 8005378:	4639      	mov	r1, r7
 800537a:	4630      	mov	r0, r6
 800537c:	47c0      	blx	r8
 800537e:	3001      	adds	r0, #1
 8005380:	d09a      	beq.n	80052b8 <_printf_i+0x12c>
 8005382:	3501      	adds	r5, #1
 8005384:	68e3      	ldr	r3, [r4, #12]
 8005386:	9a03      	ldr	r2, [sp, #12]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	42ab      	cmp	r3, r5
 800538c:	dcf2      	bgt.n	8005374 <_printf_i+0x1e8>
 800538e:	e7eb      	b.n	8005368 <_printf_i+0x1dc>
 8005390:	2500      	movs	r5, #0
 8005392:	f104 0919 	add.w	r9, r4, #25
 8005396:	e7f5      	b.n	8005384 <_printf_i+0x1f8>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ac      	bne.n	80052f6 <_printf_i+0x16a>
 800539c:	7803      	ldrb	r3, [r0, #0]
 800539e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a6:	e76c      	b.n	8005282 <_printf_i+0xf6>
 80053a8:	08005d35 	.word	0x08005d35
 80053ac:	08005d46 	.word	0x08005d46

080053b0 <memchr>:
 80053b0:	b510      	push	{r4, lr}
 80053b2:	b2c9      	uxtb	r1, r1
 80053b4:	4402      	add	r2, r0
 80053b6:	4290      	cmp	r0, r2
 80053b8:	4603      	mov	r3, r0
 80053ba:	d101      	bne.n	80053c0 <memchr+0x10>
 80053bc:	2300      	movs	r3, #0
 80053be:	e003      	b.n	80053c8 <memchr+0x18>
 80053c0:	781c      	ldrb	r4, [r3, #0]
 80053c2:	3001      	adds	r0, #1
 80053c4:	428c      	cmp	r4, r1
 80053c6:	d1f6      	bne.n	80053b6 <memchr+0x6>
 80053c8:	4618      	mov	r0, r3
 80053ca:	bd10      	pop	{r4, pc}

080053cc <memcpy>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	1e43      	subs	r3, r0, #1
 80053d0:	440a      	add	r2, r1
 80053d2:	4291      	cmp	r1, r2
 80053d4:	d100      	bne.n	80053d8 <memcpy+0xc>
 80053d6:	bd10      	pop	{r4, pc}
 80053d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e0:	e7f7      	b.n	80053d2 <memcpy+0x6>

080053e2 <memmove>:
 80053e2:	4288      	cmp	r0, r1
 80053e4:	b510      	push	{r4, lr}
 80053e6:	eb01 0302 	add.w	r3, r1, r2
 80053ea:	d807      	bhi.n	80053fc <memmove+0x1a>
 80053ec:	1e42      	subs	r2, r0, #1
 80053ee:	4299      	cmp	r1, r3
 80053f0:	d00a      	beq.n	8005408 <memmove+0x26>
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053fa:	e7f8      	b.n	80053ee <memmove+0xc>
 80053fc:	4283      	cmp	r3, r0
 80053fe:	d9f5      	bls.n	80053ec <memmove+0xa>
 8005400:	1881      	adds	r1, r0, r2
 8005402:	1ad2      	subs	r2, r2, r3
 8005404:	42d3      	cmn	r3, r2
 8005406:	d100      	bne.n	800540a <memmove+0x28>
 8005408:	bd10      	pop	{r4, pc}
 800540a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800540e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005412:	e7f7      	b.n	8005404 <memmove+0x22>

08005414 <_free_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4605      	mov	r5, r0
 8005418:	2900      	cmp	r1, #0
 800541a:	d043      	beq.n	80054a4 <_free_r+0x90>
 800541c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005420:	1f0c      	subs	r4, r1, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfb8      	it	lt
 8005426:	18e4      	addlt	r4, r4, r3
 8005428:	f000 f8d0 	bl	80055cc <__malloc_lock>
 800542c:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <_free_r+0x94>)
 800542e:	6813      	ldr	r3, [r2, #0]
 8005430:	4610      	mov	r0, r2
 8005432:	b933      	cbnz	r3, 8005442 <_free_r+0x2e>
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6014      	str	r4, [r2, #0]
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800543e:	f000 b8c6 	b.w	80055ce <__malloc_unlock>
 8005442:	42a3      	cmp	r3, r4
 8005444:	d90b      	bls.n	800545e <_free_r+0x4a>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	1862      	adds	r2, r4, r1
 800544a:	4293      	cmp	r3, r2
 800544c:	bf01      	itttt	eq
 800544e:	681a      	ldreq	r2, [r3, #0]
 8005450:	685b      	ldreq	r3, [r3, #4]
 8005452:	1852      	addeq	r2, r2, r1
 8005454:	6022      	streq	r2, [r4, #0]
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	6004      	str	r4, [r0, #0]
 800545a:	e7ed      	b.n	8005438 <_free_r+0x24>
 800545c:	4613      	mov	r3, r2
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	b10a      	cbz	r2, 8005466 <_free_r+0x52>
 8005462:	42a2      	cmp	r2, r4
 8005464:	d9fa      	bls.n	800545c <_free_r+0x48>
 8005466:	6819      	ldr	r1, [r3, #0]
 8005468:	1858      	adds	r0, r3, r1
 800546a:	42a0      	cmp	r0, r4
 800546c:	d10b      	bne.n	8005486 <_free_r+0x72>
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	4401      	add	r1, r0
 8005472:	1858      	adds	r0, r3, r1
 8005474:	4282      	cmp	r2, r0
 8005476:	6019      	str	r1, [r3, #0]
 8005478:	d1de      	bne.n	8005438 <_free_r+0x24>
 800547a:	6810      	ldr	r0, [r2, #0]
 800547c:	6852      	ldr	r2, [r2, #4]
 800547e:	4401      	add	r1, r0
 8005480:	6019      	str	r1, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	e7d8      	b.n	8005438 <_free_r+0x24>
 8005486:	d902      	bls.n	800548e <_free_r+0x7a>
 8005488:	230c      	movs	r3, #12
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	e7d4      	b.n	8005438 <_free_r+0x24>
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1821      	adds	r1, r4, r0
 8005492:	428a      	cmp	r2, r1
 8005494:	bf01      	itttt	eq
 8005496:	6811      	ldreq	r1, [r2, #0]
 8005498:	6852      	ldreq	r2, [r2, #4]
 800549a:	1809      	addeq	r1, r1, r0
 800549c:	6021      	streq	r1, [r4, #0]
 800549e:	6062      	str	r2, [r4, #4]
 80054a0:	605c      	str	r4, [r3, #4]
 80054a2:	e7c9      	b.n	8005438 <_free_r+0x24>
 80054a4:	bd38      	pop	{r3, r4, r5, pc}
 80054a6:	bf00      	nop
 80054a8:	20000134 	.word	0x20000134

080054ac <_malloc_r>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	1ccd      	adds	r5, r1, #3
 80054b0:	f025 0503 	bic.w	r5, r5, #3
 80054b4:	3508      	adds	r5, #8
 80054b6:	2d0c      	cmp	r5, #12
 80054b8:	bf38      	it	cc
 80054ba:	250c      	movcc	r5, #12
 80054bc:	2d00      	cmp	r5, #0
 80054be:	4606      	mov	r6, r0
 80054c0:	db01      	blt.n	80054c6 <_malloc_r+0x1a>
 80054c2:	42a9      	cmp	r1, r5
 80054c4:	d903      	bls.n	80054ce <_malloc_r+0x22>
 80054c6:	230c      	movs	r3, #12
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	2000      	movs	r0, #0
 80054cc:	bd70      	pop	{r4, r5, r6, pc}
 80054ce:	f000 f87d 	bl	80055cc <__malloc_lock>
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <_malloc_r+0xac>)
 80054d4:	6814      	ldr	r4, [r2, #0]
 80054d6:	4621      	mov	r1, r4
 80054d8:	b991      	cbnz	r1, 8005500 <_malloc_r+0x54>
 80054da:	4c20      	ldr	r4, [pc, #128]	; (800555c <_malloc_r+0xb0>)
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	b91b      	cbnz	r3, 80054e8 <_malloc_r+0x3c>
 80054e0:	4630      	mov	r0, r6
 80054e2:	f000 f863 	bl	80055ac <_sbrk_r>
 80054e6:	6020      	str	r0, [r4, #0]
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 f85e 	bl	80055ac <_sbrk_r>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d124      	bne.n	800553e <_malloc_r+0x92>
 80054f4:	230c      	movs	r3, #12
 80054f6:	4630      	mov	r0, r6
 80054f8:	6033      	str	r3, [r6, #0]
 80054fa:	f000 f868 	bl	80055ce <__malloc_unlock>
 80054fe:	e7e4      	b.n	80054ca <_malloc_r+0x1e>
 8005500:	680b      	ldr	r3, [r1, #0]
 8005502:	1b5b      	subs	r3, r3, r5
 8005504:	d418      	bmi.n	8005538 <_malloc_r+0x8c>
 8005506:	2b0b      	cmp	r3, #11
 8005508:	d90f      	bls.n	800552a <_malloc_r+0x7e>
 800550a:	600b      	str	r3, [r1, #0]
 800550c:	18cc      	adds	r4, r1, r3
 800550e:	50cd      	str	r5, [r1, r3]
 8005510:	4630      	mov	r0, r6
 8005512:	f000 f85c 	bl	80055ce <__malloc_unlock>
 8005516:	f104 000b 	add.w	r0, r4, #11
 800551a:	1d23      	adds	r3, r4, #4
 800551c:	f020 0007 	bic.w	r0, r0, #7
 8005520:	1ac3      	subs	r3, r0, r3
 8005522:	d0d3      	beq.n	80054cc <_malloc_r+0x20>
 8005524:	425a      	negs	r2, r3
 8005526:	50e2      	str	r2, [r4, r3]
 8005528:	e7d0      	b.n	80054cc <_malloc_r+0x20>
 800552a:	684b      	ldr	r3, [r1, #4]
 800552c:	428c      	cmp	r4, r1
 800552e:	bf16      	itet	ne
 8005530:	6063      	strne	r3, [r4, #4]
 8005532:	6013      	streq	r3, [r2, #0]
 8005534:	460c      	movne	r4, r1
 8005536:	e7eb      	b.n	8005510 <_malloc_r+0x64>
 8005538:	460c      	mov	r4, r1
 800553a:	6849      	ldr	r1, [r1, #4]
 800553c:	e7cc      	b.n	80054d8 <_malloc_r+0x2c>
 800553e:	1cc4      	adds	r4, r0, #3
 8005540:	f024 0403 	bic.w	r4, r4, #3
 8005544:	42a0      	cmp	r0, r4
 8005546:	d005      	beq.n	8005554 <_malloc_r+0xa8>
 8005548:	1a21      	subs	r1, r4, r0
 800554a:	4630      	mov	r0, r6
 800554c:	f000 f82e 	bl	80055ac <_sbrk_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d0cf      	beq.n	80054f4 <_malloc_r+0x48>
 8005554:	6025      	str	r5, [r4, #0]
 8005556:	e7db      	b.n	8005510 <_malloc_r+0x64>
 8005558:	20000134 	.word	0x20000134
 800555c:	20000138 	.word	0x20000138

08005560 <_realloc_r>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	4607      	mov	r7, r0
 8005564:	4614      	mov	r4, r2
 8005566:	460e      	mov	r6, r1
 8005568:	b921      	cbnz	r1, 8005574 <_realloc_r+0x14>
 800556a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800556e:	4611      	mov	r1, r2
 8005570:	f7ff bf9c 	b.w	80054ac <_malloc_r>
 8005574:	b922      	cbnz	r2, 8005580 <_realloc_r+0x20>
 8005576:	f7ff ff4d 	bl	8005414 <_free_r>
 800557a:	4625      	mov	r5, r4
 800557c:	4628      	mov	r0, r5
 800557e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005580:	f000 f826 	bl	80055d0 <_malloc_usable_size_r>
 8005584:	42a0      	cmp	r0, r4
 8005586:	d20f      	bcs.n	80055a8 <_realloc_r+0x48>
 8005588:	4621      	mov	r1, r4
 800558a:	4638      	mov	r0, r7
 800558c:	f7ff ff8e 	bl	80054ac <_malloc_r>
 8005590:	4605      	mov	r5, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d0f2      	beq.n	800557c <_realloc_r+0x1c>
 8005596:	4631      	mov	r1, r6
 8005598:	4622      	mov	r2, r4
 800559a:	f7ff ff17 	bl	80053cc <memcpy>
 800559e:	4631      	mov	r1, r6
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7ff ff37 	bl	8005414 <_free_r>
 80055a6:	e7e9      	b.n	800557c <_realloc_r+0x1c>
 80055a8:	4635      	mov	r5, r6
 80055aa:	e7e7      	b.n	800557c <_realloc_r+0x1c>

080055ac <_sbrk_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	2300      	movs	r3, #0
 80055b0:	4c05      	ldr	r4, [pc, #20]	; (80055c8 <_sbrk_r+0x1c>)
 80055b2:	4605      	mov	r5, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	f7fc fa54 	bl	8001a64 <_sbrk>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_sbrk_r+0x1a>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_sbrk_r+0x1a>
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	200002e0 	.word	0x200002e0

080055cc <__malloc_lock>:
 80055cc:	4770      	bx	lr

080055ce <__malloc_unlock>:
 80055ce:	4770      	bx	lr

080055d0 <_malloc_usable_size_r>:
 80055d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d4:	1f18      	subs	r0, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfbc      	itt	lt
 80055da:	580b      	ldrlt	r3, [r1, r0]
 80055dc:	18c0      	addlt	r0, r0, r3
 80055de:	4770      	bx	lr

080055e0 <atan>:
 80055e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4bb6      	ldr	r3, [pc, #728]	; (80058c0 <atan+0x2e0>)
 80055e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80055ea:	429e      	cmp	r6, r3
 80055ec:	4604      	mov	r4, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	468b      	mov	fp, r1
 80055f2:	dd17      	ble.n	8005624 <atan+0x44>
 80055f4:	4bb3      	ldr	r3, [pc, #716]	; (80058c4 <atan+0x2e4>)
 80055f6:	429e      	cmp	r6, r3
 80055f8:	dc01      	bgt.n	80055fe <atan+0x1e>
 80055fa:	d109      	bne.n	8005610 <atan+0x30>
 80055fc:	b140      	cbz	r0, 8005610 <atan+0x30>
 80055fe:	4622      	mov	r2, r4
 8005600:	462b      	mov	r3, r5
 8005602:	4620      	mov	r0, r4
 8005604:	4629      	mov	r1, r5
 8005606:	f7fa fdb1 	bl	800016c <__adddf3>
 800560a:	4604      	mov	r4, r0
 800560c:	460d      	mov	r5, r1
 800560e:	e005      	b.n	800561c <atan+0x3c>
 8005610:	f1bb 0f00 	cmp.w	fp, #0
 8005614:	4cac      	ldr	r4, [pc, #688]	; (80058c8 <atan+0x2e8>)
 8005616:	f340 8121 	ble.w	800585c <atan+0x27c>
 800561a:	4dac      	ldr	r5, [pc, #688]	; (80058cc <atan+0x2ec>)
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	4baa      	ldr	r3, [pc, #680]	; (80058d0 <atan+0x2f0>)
 8005626:	429e      	cmp	r6, r3
 8005628:	dc11      	bgt.n	800564e <atan+0x6e>
 800562a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800562e:	429e      	cmp	r6, r3
 8005630:	dc0a      	bgt.n	8005648 <atan+0x68>
 8005632:	a38b      	add	r3, pc, #556	; (adr r3, 8005860 <atan+0x280>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fd98 	bl	800016c <__adddf3>
 800563c:	2200      	movs	r2, #0
 800563e:	4ba5      	ldr	r3, [pc, #660]	; (80058d4 <atan+0x2f4>)
 8005640:	f7fb f9da 	bl	80009f8 <__aeabi_dcmpgt>
 8005644:	2800      	cmp	r0, #0
 8005646:	d1e9      	bne.n	800561c <atan+0x3c>
 8005648:	f04f 3aff 	mov.w	sl, #4294967295
 800564c:	e027      	b.n	800569e <atan+0xbe>
 800564e:	f000 f951 	bl	80058f4 <fabs>
 8005652:	4ba1      	ldr	r3, [pc, #644]	; (80058d8 <atan+0x2f8>)
 8005654:	4604      	mov	r4, r0
 8005656:	429e      	cmp	r6, r3
 8005658:	460d      	mov	r5, r1
 800565a:	f300 80b8 	bgt.w	80057ce <atan+0x1ee>
 800565e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005662:	429e      	cmp	r6, r3
 8005664:	f300 809c 	bgt.w	80057a0 <atan+0x1c0>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	f7fa fd7e 	bl	800016c <__adddf3>
 8005670:	2200      	movs	r2, #0
 8005672:	4b98      	ldr	r3, [pc, #608]	; (80058d4 <atan+0x2f4>)
 8005674:	f7fa fd78 	bl	8000168 <__aeabi_dsub>
 8005678:	2200      	movs	r2, #0
 800567a:	4606      	mov	r6, r0
 800567c:	460f      	mov	r7, r1
 800567e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005682:	4620      	mov	r0, r4
 8005684:	4629      	mov	r1, r5
 8005686:	f7fa fd71 	bl	800016c <__adddf3>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fb f84b 	bl	800072c <__aeabi_ddiv>
 8005696:	f04f 0a00 	mov.w	sl, #0
 800569a:	4604      	mov	r4, r0
 800569c:	460d      	mov	r5, r1
 800569e:	4622      	mov	r2, r4
 80056a0:	462b      	mov	r3, r5
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7fa ff17 	bl	80004d8 <__aeabi_dmul>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4680      	mov	r8, r0
 80056b0:	4689      	mov	r9, r1
 80056b2:	f7fa ff11 	bl	80004d8 <__aeabi_dmul>
 80056b6:	a36c      	add	r3, pc, #432	; (adr r3, 8005868 <atan+0x288>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	f7fa ff0a 	bl	80004d8 <__aeabi_dmul>
 80056c4:	a36a      	add	r3, pc, #424	; (adr r3, 8005870 <atan+0x290>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f7fa fd4f 	bl	800016c <__adddf3>
 80056ce:	4632      	mov	r2, r6
 80056d0:	463b      	mov	r3, r7
 80056d2:	f7fa ff01 	bl	80004d8 <__aeabi_dmul>
 80056d6:	a368      	add	r3, pc, #416	; (adr r3, 8005878 <atan+0x298>)
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f7fa fd46 	bl	800016c <__adddf3>
 80056e0:	4632      	mov	r2, r6
 80056e2:	463b      	mov	r3, r7
 80056e4:	f7fa fef8 	bl	80004d8 <__aeabi_dmul>
 80056e8:	a365      	add	r3, pc, #404	; (adr r3, 8005880 <atan+0x2a0>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f7fa fd3d 	bl	800016c <__adddf3>
 80056f2:	4632      	mov	r2, r6
 80056f4:	463b      	mov	r3, r7
 80056f6:	f7fa feef 	bl	80004d8 <__aeabi_dmul>
 80056fa:	a363      	add	r3, pc, #396	; (adr r3, 8005888 <atan+0x2a8>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f7fa fd34 	bl	800016c <__adddf3>
 8005704:	4632      	mov	r2, r6
 8005706:	463b      	mov	r3, r7
 8005708:	f7fa fee6 	bl	80004d8 <__aeabi_dmul>
 800570c:	a360      	add	r3, pc, #384	; (adr r3, 8005890 <atan+0x2b0>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f7fa fd2b 	bl	800016c <__adddf3>
 8005716:	4642      	mov	r2, r8
 8005718:	464b      	mov	r3, r9
 800571a:	f7fa fedd 	bl	80004d8 <__aeabi_dmul>
 800571e:	a35e      	add	r3, pc, #376	; (adr r3, 8005898 <atan+0x2b8>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	4680      	mov	r8, r0
 8005726:	4689      	mov	r9, r1
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fa fed4 	bl	80004d8 <__aeabi_dmul>
 8005730:	a35b      	add	r3, pc, #364	; (adr r3, 80058a0 <atan+0x2c0>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa fd17 	bl	8000168 <__aeabi_dsub>
 800573a:	4632      	mov	r2, r6
 800573c:	463b      	mov	r3, r7
 800573e:	f7fa fecb 	bl	80004d8 <__aeabi_dmul>
 8005742:	a359      	add	r3, pc, #356	; (adr r3, 80058a8 <atan+0x2c8>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	4632      	mov	r2, r6
 800574e:	463b      	mov	r3, r7
 8005750:	f7fa fec2 	bl	80004d8 <__aeabi_dmul>
 8005754:	a356      	add	r3, pc, #344	; (adr r3, 80058b0 <atan+0x2d0>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fd05 	bl	8000168 <__aeabi_dsub>
 800575e:	4632      	mov	r2, r6
 8005760:	463b      	mov	r3, r7
 8005762:	f7fa feb9 	bl	80004d8 <__aeabi_dmul>
 8005766:	a354      	add	r3, pc, #336	; (adr r3, 80058b8 <atan+0x2d8>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fa fcfc 	bl	8000168 <__aeabi_dsub>
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	f7fa feb0 	bl	80004d8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4640      	mov	r0, r8
 800577e:	4649      	mov	r1, r9
 8005780:	f7fa fcf4 	bl	800016c <__adddf3>
 8005784:	4622      	mov	r2, r4
 8005786:	462b      	mov	r3, r5
 8005788:	f7fa fea6 	bl	80004d8 <__aeabi_dmul>
 800578c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	d144      	bne.n	8005820 <atan+0x240>
 8005796:	4620      	mov	r0, r4
 8005798:	4629      	mov	r1, r5
 800579a:	f7fa fce5 	bl	8000168 <__aeabi_dsub>
 800579e:	e734      	b.n	800560a <atan+0x2a>
 80057a0:	2200      	movs	r2, #0
 80057a2:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <atan+0x2f4>)
 80057a4:	f7fa fce0 	bl	8000168 <__aeabi_dsub>
 80057a8:	2200      	movs	r2, #0
 80057aa:	4606      	mov	r6, r0
 80057ac:	460f      	mov	r7, r1
 80057ae:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <atan+0x2f4>)
 80057b0:	4620      	mov	r0, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	f7fa fcda 	bl	800016c <__adddf3>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4630      	mov	r0, r6
 80057be:	4639      	mov	r1, r7
 80057c0:	f7fa ffb4 	bl	800072c <__aeabi_ddiv>
 80057c4:	f04f 0a01 	mov.w	sl, #1
 80057c8:	4604      	mov	r4, r0
 80057ca:	460d      	mov	r5, r1
 80057cc:	e767      	b.n	800569e <atan+0xbe>
 80057ce:	4b43      	ldr	r3, [pc, #268]	; (80058dc <atan+0x2fc>)
 80057d0:	429e      	cmp	r6, r3
 80057d2:	dc1a      	bgt.n	800580a <atan+0x22a>
 80057d4:	2200      	movs	r2, #0
 80057d6:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <atan+0x300>)
 80057d8:	f7fa fcc6 	bl	8000168 <__aeabi_dsub>
 80057dc:	2200      	movs	r2, #0
 80057de:	4606      	mov	r6, r0
 80057e0:	460f      	mov	r7, r1
 80057e2:	4b3f      	ldr	r3, [pc, #252]	; (80058e0 <atan+0x300>)
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f7fa fe76 	bl	80004d8 <__aeabi_dmul>
 80057ec:	2200      	movs	r2, #0
 80057ee:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <atan+0x2f4>)
 80057f0:	f7fa fcbc 	bl	800016c <__adddf3>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fa ff96 	bl	800072c <__aeabi_ddiv>
 8005800:	f04f 0a02 	mov.w	sl, #2
 8005804:	4604      	mov	r4, r0
 8005806:	460d      	mov	r5, r1
 8005808:	e749      	b.n	800569e <atan+0xbe>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	2000      	movs	r0, #0
 8005810:	4934      	ldr	r1, [pc, #208]	; (80058e4 <atan+0x304>)
 8005812:	f7fa ff8b 	bl	800072c <__aeabi_ddiv>
 8005816:	f04f 0a03 	mov.w	sl, #3
 800581a:	4604      	mov	r4, r0
 800581c:	460d      	mov	r5, r1
 800581e:	e73e      	b.n	800569e <atan+0xbe>
 8005820:	4b31      	ldr	r3, [pc, #196]	; (80058e8 <atan+0x308>)
 8005822:	4e32      	ldr	r6, [pc, #200]	; (80058ec <atan+0x30c>)
 8005824:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005828:	4456      	add	r6, sl
 800582a:	449a      	add	sl, r3
 800582c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005830:	f7fa fc9a 	bl	8000168 <__aeabi_dsub>
 8005834:	4622      	mov	r2, r4
 8005836:	462b      	mov	r3, r5
 8005838:	f7fa fc96 	bl	8000168 <__aeabi_dsub>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005844:	f7fa fc90 	bl	8000168 <__aeabi_dsub>
 8005848:	f1bb 0f00 	cmp.w	fp, #0
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	f6bf aee4 	bge.w	800561c <atan+0x3c>
 8005854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005858:	461d      	mov	r5, r3
 800585a:	e6df      	b.n	800561c <atan+0x3c>
 800585c:	4d24      	ldr	r5, [pc, #144]	; (80058f0 <atan+0x310>)
 800585e:	e6dd      	b.n	800561c <atan+0x3c>
 8005860:	8800759c 	.word	0x8800759c
 8005864:	7e37e43c 	.word	0x7e37e43c
 8005868:	e322da11 	.word	0xe322da11
 800586c:	3f90ad3a 	.word	0x3f90ad3a
 8005870:	24760deb 	.word	0x24760deb
 8005874:	3fa97b4b 	.word	0x3fa97b4b
 8005878:	a0d03d51 	.word	0xa0d03d51
 800587c:	3fb10d66 	.word	0x3fb10d66
 8005880:	c54c206e 	.word	0xc54c206e
 8005884:	3fb745cd 	.word	0x3fb745cd
 8005888:	920083ff 	.word	0x920083ff
 800588c:	3fc24924 	.word	0x3fc24924
 8005890:	5555550d 	.word	0x5555550d
 8005894:	3fd55555 	.word	0x3fd55555
 8005898:	2c6a6c2f 	.word	0x2c6a6c2f
 800589c:	bfa2b444 	.word	0xbfa2b444
 80058a0:	52defd9a 	.word	0x52defd9a
 80058a4:	3fadde2d 	.word	0x3fadde2d
 80058a8:	af749a6d 	.word	0xaf749a6d
 80058ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80058b0:	fe231671 	.word	0xfe231671
 80058b4:	3fbc71c6 	.word	0x3fbc71c6
 80058b8:	9998ebc4 	.word	0x9998ebc4
 80058bc:	3fc99999 	.word	0x3fc99999
 80058c0:	440fffff 	.word	0x440fffff
 80058c4:	7ff00000 	.word	0x7ff00000
 80058c8:	54442d18 	.word	0x54442d18
 80058cc:	3ff921fb 	.word	0x3ff921fb
 80058d0:	3fdbffff 	.word	0x3fdbffff
 80058d4:	3ff00000 	.word	0x3ff00000
 80058d8:	3ff2ffff 	.word	0x3ff2ffff
 80058dc:	40037fff 	.word	0x40037fff
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	bff00000 	.word	0xbff00000
 80058e8:	08005d78 	.word	0x08005d78
 80058ec:	08005d58 	.word	0x08005d58
 80058f0:	bff921fb 	.word	0xbff921fb

080058f4 <fabs>:
 80058f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80058f8:	4619      	mov	r1, r3
 80058fa:	4770      	bx	lr

080058fc <atan2>:
 80058fc:	f000 b854 	b.w	80059a8 <__ieee754_atan2>

08005900 <sqrt>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	b08b      	sub	sp, #44	; 0x2c
 8005906:	4604      	mov	r4, r0
 8005908:	460d      	mov	r5, r1
 800590a:	f000 f92b 	bl	8005b64 <__ieee754_sqrt>
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <sqrt+0xa0>)
 8005910:	4680      	mov	r8, r0
 8005912:	f993 a000 	ldrsb.w	sl, [r3]
 8005916:	4689      	mov	r9, r1
 8005918:	f1ba 3fff 	cmp.w	sl, #4294967295
 800591c:	d02b      	beq.n	8005976 <sqrt+0x76>
 800591e:	4622      	mov	r2, r4
 8005920:	462b      	mov	r3, r5
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fb f871 	bl	8000a0c <__aeabi_dcmpun>
 800592a:	4683      	mov	fp, r0
 800592c:	bb18      	cbnz	r0, 8005976 <sqrt+0x76>
 800592e:	2600      	movs	r6, #0
 8005930:	2700      	movs	r7, #0
 8005932:	4632      	mov	r2, r6
 8005934:	463b      	mov	r3, r7
 8005936:	4620      	mov	r0, r4
 8005938:	4629      	mov	r1, r5
 800593a:	f7fb f83f 	bl	80009bc <__aeabi_dcmplt>
 800593e:	b1d0      	cbz	r0, 8005976 <sqrt+0x76>
 8005940:	2301      	movs	r3, #1
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <sqrt+0xa4>)
 8005946:	f8cd b020 	str.w	fp, [sp, #32]
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005950:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005954:	f1ba 0f00 	cmp.w	sl, #0
 8005958:	d112      	bne.n	8005980 <sqrt+0x80>
 800595a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800595e:	4668      	mov	r0, sp
 8005960:	f000 f9ac 	bl	8005cbc <matherr>
 8005964:	b1b8      	cbz	r0, 8005996 <sqrt+0x96>
 8005966:	9b08      	ldr	r3, [sp, #32]
 8005968:	b11b      	cbz	r3, 8005972 <sqrt+0x72>
 800596a:	f7ff f9f5 	bl	8004d58 <__errno>
 800596e:	9b08      	ldr	r3, [sp, #32]
 8005970:	6003      	str	r3, [r0, #0]
 8005972:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005976:	4640      	mov	r0, r8
 8005978:	4649      	mov	r1, r9
 800597a:	b00b      	add	sp, #44	; 0x2c
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	4632      	mov	r2, r6
 8005982:	463b      	mov	r3, r7
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fa fed0 	bl	800072c <__aeabi_ddiv>
 800598c:	f1ba 0f02 	cmp.w	sl, #2
 8005990:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005994:	d1e3      	bne.n	800595e <sqrt+0x5e>
 8005996:	f7ff f9df 	bl	8004d58 <__errno>
 800599a:	2321      	movs	r3, #33	; 0x21
 800599c:	6003      	str	r3, [r0, #0]
 800599e:	e7e2      	b.n	8005966 <sqrt+0x66>
 80059a0:	20000108 	.word	0x20000108
 80059a4:	08005d98 	.word	0x08005d98

080059a8 <__ieee754_atan2>:
 80059a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	4256      	negs	r6, r2
 80059ae:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80059b2:	4316      	orrs	r6, r2
 80059b4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8005b60 <__ieee754_atan2+0x1b8>
 80059b8:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80059bc:	454e      	cmp	r6, r9
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	469e      	mov	lr, r3
 80059c4:	d808      	bhi.n	80059d8 <__ieee754_atan2+0x30>
 80059c6:	4246      	negs	r6, r0
 80059c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80059cc:	4306      	orrs	r6, r0
 80059ce:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80059d2:	454e      	cmp	r6, r9
 80059d4:	4688      	mov	r8, r1
 80059d6:	d906      	bls.n	80059e6 <__ieee754_atan2+0x3e>
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa fbc6 	bl	800016c <__adddf3>
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	e030      	b.n	8005a48 <__ieee754_atan2+0xa0>
 80059e6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80059ea:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80059ee:	4316      	orrs	r6, r2
 80059f0:	d103      	bne.n	80059fa <__ieee754_atan2+0x52>
 80059f2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f6:	f7ff bdf3 	b.w	80055e0 <atan>
 80059fa:	179e      	asrs	r6, r3, #30
 80059fc:	f006 0602 	and.w	r6, r6, #2
 8005a00:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005a04:	ea57 0100 	orrs.w	r1, r7, r0
 8005a08:	d107      	bne.n	8005a1a <__ieee754_atan2+0x72>
 8005a0a:	2e02      	cmp	r6, #2
 8005a0c:	d079      	beq.n	8005b02 <__ieee754_atan2+0x15a>
 8005a0e:	2e03      	cmp	r6, #3
 8005a10:	d11a      	bne.n	8005a48 <__ieee754_atan2+0xa0>
 8005a12:	a541      	add	r5, pc, #260	; (adr r5, 8005b18 <__ieee754_atan2+0x170>)
 8005a14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a18:	e016      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005a1a:	ea5c 0102 	orrs.w	r1, ip, r2
 8005a1e:	d106      	bne.n	8005a2e <__ieee754_atan2+0x86>
 8005a20:	f1b8 0f00 	cmp.w	r8, #0
 8005a24:	da71      	bge.n	8005b0a <__ieee754_atan2+0x162>
 8005a26:	a53e      	add	r5, pc, #248	; (adr r5, 8005b20 <__ieee754_atan2+0x178>)
 8005a28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a2c:	e00c      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005a2e:	45cc      	cmp	ip, r9
 8005a30:	d123      	bne.n	8005a7a <__ieee754_atan2+0xd2>
 8005a32:	4567      	cmp	r7, ip
 8005a34:	d114      	bne.n	8005a60 <__ieee754_atan2+0xb8>
 8005a36:	2e02      	cmp	r6, #2
 8005a38:	d00a      	beq.n	8005a50 <__ieee754_atan2+0xa8>
 8005a3a:	2e03      	cmp	r6, #3
 8005a3c:	d00c      	beq.n	8005a58 <__ieee754_atan2+0xb0>
 8005a3e:	2e01      	cmp	r6, #1
 8005a40:	d15b      	bne.n	8005afa <__ieee754_atan2+0x152>
 8005a42:	a539      	add	r5, pc, #228	; (adr r5, 8005b28 <__ieee754_atan2+0x180>)
 8005a44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a48:	4620      	mov	r0, r4
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	a537      	add	r5, pc, #220	; (adr r5, 8005b30 <__ieee754_atan2+0x188>)
 8005a52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a56:	e7f7      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005a58:	a537      	add	r5, pc, #220	; (adr r5, 8005b38 <__ieee754_atan2+0x190>)
 8005a5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a5e:	e7f3      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005a60:	2e02      	cmp	r6, #2
 8005a62:	d04e      	beq.n	8005b02 <__ieee754_atan2+0x15a>
 8005a64:	2e03      	cmp	r6, #3
 8005a66:	d0d4      	beq.n	8005a12 <__ieee754_atan2+0x6a>
 8005a68:	2e01      	cmp	r6, #1
 8005a6a:	f04f 0400 	mov.w	r4, #0
 8005a6e:	d102      	bne.n	8005a76 <__ieee754_atan2+0xce>
 8005a70:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005a74:	e7e8      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005a76:	2500      	movs	r5, #0
 8005a78:	e7e6      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005a7a:	454f      	cmp	r7, r9
 8005a7c:	d0d0      	beq.n	8005a20 <__ieee754_atan2+0x78>
 8005a7e:	eba7 070c 	sub.w	r7, r7, ip
 8005a82:	153f      	asrs	r7, r7, #20
 8005a84:	2f3c      	cmp	r7, #60	; 0x3c
 8005a86:	dc1e      	bgt.n	8005ac6 <__ieee754_atan2+0x11e>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da01      	bge.n	8005a90 <__ieee754_atan2+0xe8>
 8005a8c:	373c      	adds	r7, #60	; 0x3c
 8005a8e:	db1e      	blt.n	8005ace <__ieee754_atan2+0x126>
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa fe4a 	bl	800072c <__aeabi_ddiv>
 8005a98:	f7ff ff2c 	bl	80058f4 <fabs>
 8005a9c:	f7ff fda0 	bl	80055e0 <atan>
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	2e01      	cmp	r6, #1
 8005aa6:	d015      	beq.n	8005ad4 <__ieee754_atan2+0x12c>
 8005aa8:	2e02      	cmp	r6, #2
 8005aaa:	d017      	beq.n	8005adc <__ieee754_atan2+0x134>
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	d0cb      	beq.n	8005a48 <__ieee754_atan2+0xa0>
 8005ab0:	a323      	add	r3, pc, #140	; (adr r3, 8005b40 <__ieee754_atan2+0x198>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fb55 	bl	8000168 <__aeabi_dsub>
 8005abe:	a322      	add	r3, pc, #136	; (adr r3, 8005b48 <__ieee754_atan2+0x1a0>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	e016      	b.n	8005af4 <__ieee754_atan2+0x14c>
 8005ac6:	a522      	add	r5, pc, #136	; (adr r5, 8005b50 <__ieee754_atan2+0x1a8>)
 8005ac8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005acc:	e7ea      	b.n	8005aa4 <__ieee754_atan2+0xfc>
 8005ace:	2400      	movs	r4, #0
 8005ad0:	2500      	movs	r5, #0
 8005ad2:	e7e7      	b.n	8005aa4 <__ieee754_atan2+0xfc>
 8005ad4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005ad8:	461d      	mov	r5, r3
 8005ada:	e7b5      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005adc:	a318      	add	r3, pc, #96	; (adr r3, 8005b40 <__ieee754_atan2+0x198>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	f7fa fb3f 	bl	8000168 <__aeabi_dsub>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	a116      	add	r1, pc, #88	; (adr r1, 8005b48 <__ieee754_atan2+0x1a0>)
 8005af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005af4:	f7fa fb38 	bl	8000168 <__aeabi_dsub>
 8005af8:	e772      	b.n	80059e0 <__ieee754_atan2+0x38>
 8005afa:	a517      	add	r5, pc, #92	; (adr r5, 8005b58 <__ieee754_atan2+0x1b0>)
 8005afc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b00:	e7a2      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005b02:	a511      	add	r5, pc, #68	; (adr r5, 8005b48 <__ieee754_atan2+0x1a0>)
 8005b04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b08:	e79e      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005b0a:	a511      	add	r5, pc, #68	; (adr r5, 8005b50 <__ieee754_atan2+0x1a8>)
 8005b0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b10:	e79a      	b.n	8005a48 <__ieee754_atan2+0xa0>
 8005b12:	bf00      	nop
 8005b14:	f3af 8000 	nop.w
 8005b18:	54442d18 	.word	0x54442d18
 8005b1c:	c00921fb 	.word	0xc00921fb
 8005b20:	54442d18 	.word	0x54442d18
 8005b24:	bff921fb 	.word	0xbff921fb
 8005b28:	54442d18 	.word	0x54442d18
 8005b2c:	bfe921fb 	.word	0xbfe921fb
 8005b30:	7f3321d2 	.word	0x7f3321d2
 8005b34:	4002d97c 	.word	0x4002d97c
 8005b38:	7f3321d2 	.word	0x7f3321d2
 8005b3c:	c002d97c 	.word	0xc002d97c
 8005b40:	33145c07 	.word	0x33145c07
 8005b44:	3ca1a626 	.word	0x3ca1a626
 8005b48:	54442d18 	.word	0x54442d18
 8005b4c:	400921fb 	.word	0x400921fb
 8005b50:	54442d18 	.word	0x54442d18
 8005b54:	3ff921fb 	.word	0x3ff921fb
 8005b58:	54442d18 	.word	0x54442d18
 8005b5c:	3fe921fb 	.word	0x3fe921fb
 8005b60:	7ff00000 	.word	0x7ff00000

08005b64 <__ieee754_sqrt>:
 8005b64:	4b54      	ldr	r3, [pc, #336]	; (8005cb8 <__ieee754_sqrt+0x154>)
 8005b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6a:	438b      	bics	r3, r1
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	460d      	mov	r5, r1
 8005b70:	460a      	mov	r2, r1
 8005b72:	460c      	mov	r4, r1
 8005b74:	d10f      	bne.n	8005b96 <__ieee754_sqrt+0x32>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	f7fa fcad 	bl	80004d8 <__aeabi_dmul>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4630      	mov	r0, r6
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7fa faf1 	bl	800016c <__adddf3>
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4629      	mov	r1, r5
 8005b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b96:	2900      	cmp	r1, #0
 8005b98:	4607      	mov	r7, r0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	dc0e      	bgt.n	8005bbc <__ieee754_sqrt+0x58>
 8005b9e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005ba2:	ea5c 0707 	orrs.w	r7, ip, r7
 8005ba6:	d0f2      	beq.n	8005b8e <__ieee754_sqrt+0x2a>
 8005ba8:	b141      	cbz	r1, 8005bbc <__ieee754_sqrt+0x58>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	f7fa fadb 	bl	8000168 <__aeabi_dsub>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	f7fa fdb9 	bl	800072c <__aeabi_ddiv>
 8005bba:	e7e6      	b.n	8005b8a <__ieee754_sqrt+0x26>
 8005bbc:	1512      	asrs	r2, r2, #20
 8005bbe:	d074      	beq.n	8005caa <__ieee754_sqrt+0x146>
 8005bc0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005bc4:	07d5      	lsls	r5, r2, #31
 8005bc6:	f04f 0500 	mov.w	r5, #0
 8005bca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005bce:	bf48      	it	mi
 8005bd0:	0fd9      	lsrmi	r1, r3, #31
 8005bd2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005bd6:	bf44      	itt	mi
 8005bd8:	005b      	lslmi	r3, r3, #1
 8005bda:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005bde:	1051      	asrs	r1, r2, #1
 8005be0:	0fda      	lsrs	r2, r3, #31
 8005be2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005be6:	4628      	mov	r0, r5
 8005be8:	2216      	movs	r2, #22
 8005bea:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	1987      	adds	r7, r0, r6
 8005bf2:	42a7      	cmp	r7, r4
 8005bf4:	bfde      	ittt	le
 8005bf6:	19b8      	addle	r0, r7, r6
 8005bf8:	1be4      	suble	r4, r4, r7
 8005bfa:	19ad      	addle	r5, r5, r6
 8005bfc:	0fdf      	lsrs	r7, r3, #31
 8005bfe:	3a01      	subs	r2, #1
 8005c00:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005c0c:	d1f0      	bne.n	8005bf0 <__ieee754_sqrt+0x8c>
 8005c0e:	f04f 0c20 	mov.w	ip, #32
 8005c12:	4696      	mov	lr, r2
 8005c14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005c18:	4284      	cmp	r4, r0
 8005c1a:	eb06 070e 	add.w	r7, r6, lr
 8005c1e:	dc02      	bgt.n	8005c26 <__ieee754_sqrt+0xc2>
 8005c20:	d112      	bne.n	8005c48 <__ieee754_sqrt+0xe4>
 8005c22:	429f      	cmp	r7, r3
 8005c24:	d810      	bhi.n	8005c48 <__ieee754_sqrt+0xe4>
 8005c26:	2f00      	cmp	r7, #0
 8005c28:	eb07 0e06 	add.w	lr, r7, r6
 8005c2c:	da42      	bge.n	8005cb4 <__ieee754_sqrt+0x150>
 8005c2e:	f1be 0f00 	cmp.w	lr, #0
 8005c32:	db3f      	blt.n	8005cb4 <__ieee754_sqrt+0x150>
 8005c34:	f100 0801 	add.w	r8, r0, #1
 8005c38:	1a24      	subs	r4, r4, r0
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	429f      	cmp	r7, r3
 8005c3e:	bf88      	it	hi
 8005c40:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005c44:	1bdb      	subs	r3, r3, r7
 8005c46:	4432      	add	r2, r6
 8005c48:	0064      	lsls	r4, r4, #1
 8005c4a:	f1bc 0c01 	subs.w	ip, ip, #1
 8005c4e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005c52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005c56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c5a:	d1dd      	bne.n	8005c18 <__ieee754_sqrt+0xb4>
 8005c5c:	4323      	orrs	r3, r4
 8005c5e:	d006      	beq.n	8005c6e <__ieee754_sqrt+0x10a>
 8005c60:	1c54      	adds	r4, r2, #1
 8005c62:	bf0b      	itete	eq
 8005c64:	4662      	moveq	r2, ip
 8005c66:	3201      	addne	r2, #1
 8005c68:	3501      	addeq	r5, #1
 8005c6a:	f022 0201 	bicne.w	r2, r2, #1
 8005c6e:	106b      	asrs	r3, r5, #1
 8005c70:	0852      	lsrs	r2, r2, #1
 8005c72:	07e8      	lsls	r0, r5, #31
 8005c74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005c78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005c7c:	bf48      	it	mi
 8005c7e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005c82:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005c86:	4616      	mov	r6, r2
 8005c88:	e781      	b.n	8005b8e <__ieee754_sqrt+0x2a>
 8005c8a:	0adc      	lsrs	r4, r3, #11
 8005c8c:	3915      	subs	r1, #21
 8005c8e:	055b      	lsls	r3, r3, #21
 8005c90:	2c00      	cmp	r4, #0
 8005c92:	d0fa      	beq.n	8005c8a <__ieee754_sqrt+0x126>
 8005c94:	02e6      	lsls	r6, r4, #11
 8005c96:	d50a      	bpl.n	8005cae <__ieee754_sqrt+0x14a>
 8005c98:	f1c2 0020 	rsb	r0, r2, #32
 8005c9c:	fa23 f000 	lsr.w	r0, r3, r0
 8005ca0:	1e55      	subs	r5, r2, #1
 8005ca2:	4093      	lsls	r3, r2
 8005ca4:	4304      	orrs	r4, r0
 8005ca6:	1b4a      	subs	r2, r1, r5
 8005ca8:	e78a      	b.n	8005bc0 <__ieee754_sqrt+0x5c>
 8005caa:	4611      	mov	r1, r2
 8005cac:	e7f0      	b.n	8005c90 <__ieee754_sqrt+0x12c>
 8005cae:	0064      	lsls	r4, r4, #1
 8005cb0:	3201      	adds	r2, #1
 8005cb2:	e7ef      	b.n	8005c94 <__ieee754_sqrt+0x130>
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	e7bf      	b.n	8005c38 <__ieee754_sqrt+0xd4>
 8005cb8:	7ff00000 	.word	0x7ff00000

08005cbc <matherr>:
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	4770      	bx	lr

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
